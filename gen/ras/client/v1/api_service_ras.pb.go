// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package clientv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/messages/v1"
	v11 "github.com/v8platform/protos/gen/ras/protocol/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type ClustersService interface {
	GetClusters(ctx context.Context, req *v1.GetClustersRequest, opts ...interface{}) (*v1.GetClustersResponse, error)
	GetClusterInfo(ctx context.Context, req *v1.GetClusterInfoRequest, opts ...interface{}) (*v1.GetClusterInfoResponse, error)
	RegCluster(ctx context.Context, req *v1.RegClusterRequest, opts ...interface{}) (*v1.RegClusterResponse, error)
	UnregCluster(ctx context.Context, req *v1.UnregClusterRequest, opts ...interface{}) (*emptypb.Empty, error)
	GetManagers(ctx context.Context, req *v1.GetClusterManagersRequest, opts ...interface{}) (*v1.GetClusterManagersResponse, error)
	GetManagerInfo(ctx context.Context, req *v1.GetClusterManagerInfoRequest, opts ...interface{}) (*v1.GetClusterManagerInfoResponse, error)
	GetWorkingProcesses(ctx context.Context, req *v1.GetWorkingProcessesRequest, opts ...interface{}) (*v1.GetWorkingProcessesResponse, error)
	GetWorkingProcessInfo(ctx context.Context, req *v1.GetWorkingProcessInfoRequest, opts ...interface{}) (*v1.GetWorkingProcessInfoResponse, error)
	GetWorkingServers(ctx context.Context, req *v1.GetWorkingServersRequest, opts ...interface{}) (*v1.GetWorkingServersResponse, error)
	GetWorkingServerInfo(ctx context.Context, req *v1.GetWorkingServerInfoRequest, opts ...interface{}) (*v1.GetWorkingServerInfoResponse, error)
	AddWorkingServer(ctx context.Context, req *v1.AddWorkingServerRequest, opts ...interface{}) (*v1.AddWorkingServerResponse, error)
	DeleteWorkingServer(ctx context.Context, req *v1.DeleteWorkingServerRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewClustersService(client Client) ClustersService {
	return &clustersService{
		client,
	}
}

// ClustersService is the endpoint message service for RAS service.
type clustersService struct {
	cc Client
}

func (x *clustersService) GetClusters(ctx context.Context, req *v1.GetClustersRequest, opts ...interface{}) (*v1.GetClustersResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetClustersHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetClustersHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetClustersRequest, opts ...interface{}) (*v1.GetClustersResponse, error) {

	resp := new(v1.GetClustersResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetClusterInfo(ctx context.Context, req *v1.GetClusterInfoRequest, opts ...interface{}) (*v1.GetClusterInfoResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetClusterInfoHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetClusterInfoHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetClusterInfoRequest, opts ...interface{}) (*v1.GetClusterInfoResponse, error) {

	resp := new(v1.GetClusterInfoResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) RegCluster(ctx context.Context, req *v1.RegClusterRequest, opts ...interface{}) (*v1.RegClusterResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return RegClusterHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func RegClusterHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.RegClusterRequest, opts ...interface{}) (*v1.RegClusterResponse, error) {

	resp := new(v1.RegClusterResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) UnregCluster(ctx context.Context, req *v1.UnregClusterRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return UnregClusterHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func UnregClusterHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.UnregClusterRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetManagers(ctx context.Context, req *v1.GetClusterManagersRequest, opts ...interface{}) (*v1.GetClusterManagersResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetManagersHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetManagersHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetClusterManagersRequest, opts ...interface{}) (*v1.GetClusterManagersResponse, error) {

	resp := new(v1.GetClusterManagersResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetManagerInfo(ctx context.Context, req *v1.GetClusterManagerInfoRequest, opts ...interface{}) (*v1.GetClusterManagerInfoResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetManagerInfoHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetManagerInfoHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetClusterManagerInfoRequest, opts ...interface{}) (*v1.GetClusterManagerInfoResponse, error) {

	resp := new(v1.GetClusterManagerInfoResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetWorkingProcesses(ctx context.Context, req *v1.GetWorkingProcessesRequest, opts ...interface{}) (*v1.GetWorkingProcessesResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetWorkingProcessesHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetWorkingProcessesHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetWorkingProcessesRequest, opts ...interface{}) (*v1.GetWorkingProcessesResponse, error) {

	resp := new(v1.GetWorkingProcessesResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetWorkingProcessInfo(ctx context.Context, req *v1.GetWorkingProcessInfoRequest, opts ...interface{}) (*v1.GetWorkingProcessInfoResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetWorkingProcessInfoHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetWorkingProcessInfoHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetWorkingProcessInfoRequest, opts ...interface{}) (*v1.GetWorkingProcessInfoResponse, error) {

	resp := new(v1.GetWorkingProcessInfoResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetWorkingServers(ctx context.Context, req *v1.GetWorkingServersRequest, opts ...interface{}) (*v1.GetWorkingServersResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetWorkingServersHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetWorkingServersHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetWorkingServersRequest, opts ...interface{}) (*v1.GetWorkingServersResponse, error) {

	resp := new(v1.GetWorkingServersResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) GetWorkingServerInfo(ctx context.Context, req *v1.GetWorkingServerInfoRequest, opts ...interface{}) (*v1.GetWorkingServerInfoResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetWorkingServerInfoHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetWorkingServerInfoHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetWorkingServerInfoRequest, opts ...interface{}) (*v1.GetWorkingServerInfoResponse, error) {

	resp := new(v1.GetWorkingServerInfoResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) AddWorkingServer(ctx context.Context, req *v1.AddWorkingServerRequest, opts ...interface{}) (*v1.AddWorkingServerResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return AddWorkingServerHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func AddWorkingServerHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.AddWorkingServerRequest, opts ...interface{}) (*v1.AddWorkingServerResponse, error) {

	resp := new(v1.AddWorkingServerResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *clustersService) DeleteWorkingServer(ctx context.Context, req *v1.DeleteWorkingServerRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return DeleteWorkingServerHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func DeleteWorkingServerHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.DeleteWorkingServerRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type InfobasesService interface {
	GetInfobasesSummary(ctx context.Context, req *v1.GetInfobasesSummaryRequest, opts ...interface{}) (*v1.GetInfobasesSummaryResponse, error)
	GetInfobases(ctx context.Context, req *v1.GetInfobasesRequest, opts ...interface{}) (*v1.GetInfobasesResponse, error)
	CreateInfobase(ctx context.Context, req *v1.CreateInfobaseRequest, opts ...interface{}) (*v1.CreateInfobaseResponse, error)
	DropInfobase(ctx context.Context, req *v1.DropInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error)
	UpdateInfobase(ctx context.Context, req *v1.UpdateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error)
	UpdateInfobaseSummary(ctx context.Context, req *v1.UpdateInfobaseSummaryRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewInfobasesService(client Client) InfobasesService {
	return &infobasesService{
		client,
	}
}

// InfobasesService is the endpoint message service for RAS service.
type infobasesService struct {
	cc Client
}

func (x *infobasesService) GetInfobasesSummary(ctx context.Context, req *v1.GetInfobasesSummaryRequest, opts ...interface{}) (*v1.GetInfobasesSummaryResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetInfobasesSummaryHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetInfobasesSummaryHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetInfobasesSummaryRequest, opts ...interface{}) (*v1.GetInfobasesSummaryResponse, error) {

	resp := new(v1.GetInfobasesSummaryResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *infobasesService) GetInfobases(ctx context.Context, req *v1.GetInfobasesRequest, opts ...interface{}) (*v1.GetInfobasesResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetInfobasesHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetInfobasesHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetInfobasesRequest, opts ...interface{}) (*v1.GetInfobasesResponse, error) {

	resp := new(v1.GetInfobasesResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *infobasesService) CreateInfobase(ctx context.Context, req *v1.CreateInfobaseRequest, opts ...interface{}) (*v1.CreateInfobaseResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return CreateInfobaseHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func CreateInfobaseHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.CreateInfobaseRequest, opts ...interface{}) (*v1.CreateInfobaseResponse, error) {

	resp := new(v1.CreateInfobaseResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *infobasesService) DropInfobase(ctx context.Context, req *v1.DropInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return DropInfobaseHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func DropInfobaseHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.DropInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *infobasesService) UpdateInfobase(ctx context.Context, req *v1.UpdateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return UpdateInfobaseHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func UpdateInfobaseHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.UpdateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *infobasesService) UpdateInfobaseSummary(ctx context.Context, req *v1.UpdateInfobaseSummaryRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return UpdateInfobaseSummaryHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func UpdateInfobaseSummaryHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.UpdateInfobaseSummaryRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type SessionsService interface {
	GetSessions(ctx context.Context, req *v1.GetSessionsRequest, opts ...interface{}) (*v1.GetSessionsResponse, error)
	GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseSessionsRequest, opts ...interface{}) (*v1.GetInfobaseSessionsResponse, error)
	GetSessionInfo(ctx context.Context, req *v1.GetSessionInfoRequest, opts ...interface{}) (*v1.GetSessionInfoResponse, error)
	TerminateSession(ctx context.Context, req *v1.TerminateSessionRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewSessionsService(client Client) SessionsService {
	return &sessionsService{
		client,
	}
}

// SessionsService is the endpoint message service for RAS service.
type sessionsService struct {
	cc Client
}

func (x *sessionsService) GetSessions(ctx context.Context, req *v1.GetSessionsRequest, opts ...interface{}) (*v1.GetSessionsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetSessionsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetSessionsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetSessionsRequest, opts ...interface{}) (*v1.GetSessionsResponse, error) {

	resp := new(v1.GetSessionsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *sessionsService) GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseSessionsRequest, opts ...interface{}) (*v1.GetInfobaseSessionsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetInfobaseSessionsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetInfobaseSessionsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetInfobaseSessionsRequest, opts ...interface{}) (*v1.GetInfobaseSessionsResponse, error) {

	resp := new(v1.GetInfobaseSessionsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *sessionsService) GetSessionInfo(ctx context.Context, req *v1.GetSessionInfoRequest, opts ...interface{}) (*v1.GetSessionInfoResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetSessionInfoHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetSessionInfoHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetSessionInfoRequest, opts ...interface{}) (*v1.GetSessionInfoResponse, error) {

	resp := new(v1.GetSessionInfoResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *sessionsService) TerminateSession(ctx context.Context, req *v1.TerminateSessionRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return TerminateSessionHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func TerminateSessionHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.TerminateSessionRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type LocksService interface {
	GetLocks(ctx context.Context, req *v1.GetLocksRequest, opts ...interface{}) (*v1.GetLocksResponse, error)
	GetInfobaseLocks(ctx context.Context, req *v1.GetInfobaseLocksRequest, opts ...interface{}) (*v1.GetInfobaseLocksResponse, error)
	GetConnectionLocks(ctx context.Context, req *v1.GetConnectionLocksRequest, opts ...interface{}) (*v1.GetConnectionLocksResponse, error)
	GetSessionLocks(ctx context.Context, req *v1.GetSessionLocksRequest, opts ...interface{}) (*v1.GetSessionLocksResponse, error)
}

func NewLocksService(client Client) LocksService {
	return &locksService{
		client,
	}
}

// LocksService is the endpoint message service for RAS service.
type locksService struct {
	cc Client
}

func (x *locksService) GetLocks(ctx context.Context, req *v1.GetLocksRequest, opts ...interface{}) (*v1.GetLocksResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetLocksHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetLocksHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetLocksRequest, opts ...interface{}) (*v1.GetLocksResponse, error) {

	resp := new(v1.GetLocksResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *locksService) GetInfobaseLocks(ctx context.Context, req *v1.GetInfobaseLocksRequest, opts ...interface{}) (*v1.GetInfobaseLocksResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetInfobaseLocksHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetInfobaseLocksHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetInfobaseLocksRequest, opts ...interface{}) (*v1.GetInfobaseLocksResponse, error) {

	resp := new(v1.GetInfobaseLocksResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *locksService) GetConnectionLocks(ctx context.Context, req *v1.GetConnectionLocksRequest, opts ...interface{}) (*v1.GetConnectionLocksResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetConnectionLocksHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetConnectionLocksHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetConnectionLocksRequest, opts ...interface{}) (*v1.GetConnectionLocksResponse, error) {

	resp := new(v1.GetConnectionLocksResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *locksService) GetSessionLocks(ctx context.Context, req *v1.GetSessionLocksRequest, opts ...interface{}) (*v1.GetSessionLocksResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetSessionLocksHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetSessionLocksHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetSessionLocksRequest, opts ...interface{}) (*v1.GetSessionLocksResponse, error) {

	resp := new(v1.GetSessionLocksResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type ConnectionsService interface {
	GetConnections(ctx context.Context, req *v1.GetConnectionsRequest, opts ...interface{}) (*v1.GetConnectionsResponse, error)
	GetInfobaseConnections(ctx context.Context, req *v1.GetInfobaseConnectionsRequest, opts ...interface{}) (*v1.GetInfobaseConnectionsResponse, error)
	DisconnectConnection(ctx context.Context, req *v1.DisconnectConnectionRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewConnectionsService(client Client) ConnectionsService {
	return &connectionsService{
		client,
	}
}

// ConnectionsService is the endpoint message service for RAS service.
type connectionsService struct {
	cc Client
}

func (x *connectionsService) GetConnections(ctx context.Context, req *v1.GetConnectionsRequest, opts ...interface{}) (*v1.GetConnectionsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetConnectionsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetConnectionsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetConnectionsRequest, opts ...interface{}) (*v1.GetConnectionsResponse, error) {

	resp := new(v1.GetConnectionsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *connectionsService) GetInfobaseConnections(ctx context.Context, req *v1.GetInfobaseConnectionsRequest, opts ...interface{}) (*v1.GetInfobaseConnectionsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetInfobaseConnectionsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetInfobaseConnectionsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetInfobaseConnectionsRequest, opts ...interface{}) (*v1.GetInfobaseConnectionsResponse, error) {

	resp := new(v1.GetInfobaseConnectionsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *connectionsService) DisconnectConnection(ctx context.Context, req *v1.DisconnectConnectionRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return DisconnectConnectionHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func DisconnectConnectionHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.DisconnectConnectionRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type AuthService interface {
	AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error)
	AuthenticateInfobase(ctx context.Context, req *v1.AuthenticateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error)
	AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewAuthService(client Client) AuthService {
	return &authService{
		client,
	}
}

// AuthService is the endpoint message service for RAS service.
type authService struct {
	cc Client
}

func (x *authService) AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return AuthenticateClusterHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func AuthenticateClusterHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.ClusterAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *authService) AuthenticateInfobase(ctx context.Context, req *v1.AuthenticateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return AuthenticateInfobaseHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func AuthenticateInfobaseHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.AuthenticateInfobaseRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *authService) AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return AuthenticateServerHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func AuthenticateServerHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.ServerAuthenticateRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

type AdminService interface {
	GetVersion(ctx context.Context, req *v1.GetAgentVersionRequest, opts ...interface{}) (*v1.GetAgentVersionResponse, error)
	GetServerAdmins(ctx context.Context, req *v1.GetAgentAdminsRequest, opts ...interface{}) (*v1.GetAgentAdminsResponse, error)
	GetClustersAdmins(ctx context.Context, req *v1.GetClusterAdminsRequest, opts ...interface{}) (*v1.GetClusterAdminsResponse, error)
	CreateServerAdmin(ctx context.Context, req *v1.CreateAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error)
	CreateClusterAdmin(ctx context.Context, req *v1.CreateClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error)
	DeleteServerAdmin(ctx context.Context, req *v1.DeleteAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error)
	DeleteClusterAdmin(ctx context.Context, req *v1.DeleteClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error)
}

func NewAdminService(client Client) AdminService {
	return &adminService{
		client,
	}
}

// AdminService is the endpoint message service for RAS service.
type adminService struct {
	cc Client
}

func (x *adminService) GetVersion(ctx context.Context, req *v1.GetAgentVersionRequest, opts ...interface{}) (*v1.GetAgentVersionResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetVersionHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetVersionHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetAgentVersionRequest, opts ...interface{}) (*v1.GetAgentVersionResponse, error) {

	resp := new(v1.GetAgentVersionResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) GetServerAdmins(ctx context.Context, req *v1.GetAgentAdminsRequest, opts ...interface{}) (*v1.GetAgentAdminsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetServerAdminsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetServerAdminsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetAgentAdminsRequest, opts ...interface{}) (*v1.GetAgentAdminsResponse, error) {

	resp := new(v1.GetAgentAdminsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) GetClustersAdmins(ctx context.Context, req *v1.GetClusterAdminsRequest, opts ...interface{}) (*v1.GetClusterAdminsResponse, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return GetClustersAdminsHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func GetClustersAdminsHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.GetClusterAdminsRequest, opts ...interface{}) (*v1.GetClusterAdminsResponse, error) {

	resp := new(v1.GetClusterAdminsResponse)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, resp), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) CreateServerAdmin(ctx context.Context, req *v1.CreateAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return CreateServerAdminHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func CreateServerAdminHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.CreateAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) CreateClusterAdmin(ctx context.Context, req *v1.CreateClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return CreateClusterAdminHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func CreateClusterAdminHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.CreateClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) DeleteServerAdmin(ctx context.Context, req *v1.DeleteAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return DeleteServerAdminHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func DeleteServerAdminHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.DeleteAgentAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

func (x *adminService) DeleteClusterAdmin(ctx context.Context, req *v1.DeleteClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	endpoint, err := x.cc.GetEndpoint(ctx)
	if err != nil {
		return nil, err
	}
	return DeleteClusterAdminHandler(ctx, x.cc.Request, endpoint, req, opts...)
}

func DeleteClusterAdminHandler(ctx context.Context, cc Request, endpoint Endpoint, req *v1.DeleteClusterAdminRequest, opts ...interface{}) (*emptypb.Empty, error) {

	resp := new(emptypb.Empty)
	if err := cc(ctx, v11.EndpointRequestHandler(endpoint, req, nil), opts...); err != nil {
		return nil, err
	}
	return resp, nil
}
