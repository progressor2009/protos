// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package clientv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/messages/v1"
	proto "google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type ClustersServiceImpl interface {
	GetClusters(ctx context.Context, req *v1.GetClustersRequest) (*v1.GetClustersResponse, error)
	GetClusterInfo(ctx context.Context, req *v1.GetClusterInfoRequest) (*v1.GetClusterInfoResponse, error)
	RegCluster(ctx context.Context, req *v1.RegClusterRequest) (*v1.RegClusterResponse, error)
	UnregCluster(ctx context.Context, req *v1.UnregClusterRequest) (*emptypb.Empty, error)
	Authenticate(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error)
	GetManagers(ctx context.Context, req *v1.GetClusterManagersRequest) (*v1.GetClusterManagersResponse, error)
	GetManagerInfo(ctx context.Context, req *v1.GetClusterManagerInfoRequest) (*v1.GetClusterManagerInfoResponse, error)
	GetWorkingProcesses(ctx context.Context, req *v1.GetWorkingProcessesRequest) (*v1.GetWorkingProcessesResponse, error)
	GetWorkingProcessInfo(ctx context.Context, req *v1.GetWorkingProcessInfoRequest) (*v1.GetWorkingProcessInfoResponse, error)
	GetWorkingServers(ctx context.Context, req *v1.GetWorkingServersRequest) (*v1.GetWorkingServersResponse, error)
	GetWorkingServerInfo(ctx context.Context, req *v1.GetWorkingServerInfoRequest) (*v1.GetWorkingServerInfoResponse, error)
	AddWorkingServer(ctx context.Context, req *v1.AddWorkingServerRequest) (*v1.AddWorkingServerResponse, error)
	DeleteWorkingServer(ctx context.Context, req *v1.DeleteWorkingServerRequest) (*emptypb.Empty, error)
}

func NewClustersService(endpointService EndpointServiceImpl) ClustersServiceImpl {
	return &ClustersService{
		endpointService,
	}
}

// ClustersService is the endpoint message service for RAS service.
type ClustersService struct {
	e EndpointServiceImpl
}

func (x *ClustersService) GetClusters(ctx context.Context, req *v1.GetClustersRequest) (*v1.GetClustersResponse, error) {

	var resp v1.GetClustersResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetClusterInfo(ctx context.Context, req *v1.GetClusterInfoRequest) (*v1.GetClusterInfoResponse, error) {

	var resp v1.GetClusterInfoResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) RegCluster(ctx context.Context, req *v1.RegClusterRequest) (*v1.RegClusterResponse, error) {

	var resp v1.RegClusterResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) UnregCluster(ctx context.Context, req *v1.UnregClusterRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) Authenticate(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetManagers(ctx context.Context, req *v1.GetClusterManagersRequest) (*v1.GetClusterManagersResponse, error) {

	var resp v1.GetClusterManagersResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetManagerInfo(ctx context.Context, req *v1.GetClusterManagerInfoRequest) (*v1.GetClusterManagerInfoResponse, error) {

	var resp v1.GetClusterManagerInfoResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetWorkingProcesses(ctx context.Context, req *v1.GetWorkingProcessesRequest) (*v1.GetWorkingProcessesResponse, error) {

	var resp v1.GetWorkingProcessesResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetWorkingProcessInfo(ctx context.Context, req *v1.GetWorkingProcessInfoRequest) (*v1.GetWorkingProcessInfoResponse, error) {

	var resp v1.GetWorkingProcessInfoResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetWorkingServers(ctx context.Context, req *v1.GetWorkingServersRequest) (*v1.GetWorkingServersResponse, error) {

	var resp v1.GetWorkingServersResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) GetWorkingServerInfo(ctx context.Context, req *v1.GetWorkingServerInfoRequest) (*v1.GetWorkingServerInfoResponse, error) {

	var resp v1.GetWorkingServerInfoResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) AddWorkingServer(ctx context.Context, req *v1.AddWorkingServerRequest) (*v1.AddWorkingServerResponse, error) {

	var resp v1.AddWorkingServerResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ClustersService) DeleteWorkingServer(ctx context.Context, req *v1.DeleteWorkingServerRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type InfobasesServiceImpl interface {
	Authenticate(ctx context.Context, req *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error)
	GetInfobasesSummary(ctx context.Context, req *v1.GetInfobasesSummaryRequest) (*v1.GetInfobasesSummaryResponse, error)
	GetInfobases(ctx context.Context, req *v1.GetInfobasesRequest) (*v1.GetInfobasesResponse, error)
	CreateInfobase(ctx context.Context, req *v1.CreateInfobaseRequest) (*v1.CreateInfobaseResponse, error)
	DropInfobase(ctx context.Context, req *v1.DropInfobaseRequest) (*emptypb.Empty, error)
	UpdateInfobase(ctx context.Context, req *v1.UpdateInfobaseRequest) (*emptypb.Empty, error)
	UpdateInfobaseSummary(ctx context.Context, req *v1.UpdateInfobaseSummaryRequest) (*emptypb.Empty, error)
}

func NewInfobasesService(endpointService EndpointServiceImpl) InfobasesServiceImpl {
	return &InfobasesService{
		endpointService,
	}
}

// InfobasesService is the endpoint message service for RAS service.
type InfobasesService struct {
	e EndpointServiceImpl
}

func (x *InfobasesService) Authenticate(ctx context.Context, req *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) GetInfobasesSummary(ctx context.Context, req *v1.GetInfobasesSummaryRequest) (*v1.GetInfobasesSummaryResponse, error) {

	var resp v1.GetInfobasesSummaryResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) GetInfobases(ctx context.Context, req *v1.GetInfobasesRequest) (*v1.GetInfobasesResponse, error) {

	var resp v1.GetInfobasesResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) CreateInfobase(ctx context.Context, req *v1.CreateInfobaseRequest) (*v1.CreateInfobaseResponse, error) {

	var resp v1.CreateInfobaseResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) DropInfobase(ctx context.Context, req *v1.DropInfobaseRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) UpdateInfobase(ctx context.Context, req *v1.UpdateInfobaseRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *InfobasesService) UpdateInfobaseSummary(ctx context.Context, req *v1.UpdateInfobaseSummaryRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type SessionsServiceImpl interface {
	GetSessions(ctx context.Context, req *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error)
	GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error)
	GetSessionInfo(ctx context.Context, req *v1.GetSessionInfoRequest) (*v1.GetSessionInfoResponse, error)
	TerminateSession(ctx context.Context, req *v1.TerminateSessionRequest) (*emptypb.Empty, error)
}

func NewSessionsService(endpointService EndpointServiceImpl) SessionsServiceImpl {
	return &SessionsService{
		endpointService,
	}
}

// SessionsService is the endpoint message service for RAS service.
type SessionsService struct {
	e EndpointServiceImpl
}

func (x *SessionsService) GetSessions(ctx context.Context, req *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error) {

	var resp v1.GetSessionsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *SessionsService) GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error) {

	var resp v1.GetInfobaseSessionsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *SessionsService) GetSessionInfo(ctx context.Context, req *v1.GetSessionInfoRequest) (*v1.GetSessionInfoResponse, error) {

	var resp v1.GetSessionInfoResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *SessionsService) TerminateSession(ctx context.Context, req *v1.TerminateSessionRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type LocksServiceImpl interface {
	GetLocks(ctx context.Context, req *v1.GetLocksRequest) (*v1.GetLocksResponse, error)
	GetInfobaseLocks(ctx context.Context, req *v1.GetInfobaseLocksRequest) (*v1.GetInfobaseLocksResponse, error)
	GetConnectionLocks(ctx context.Context, req *v1.GetConnectionLocksRequest) (*v1.GetConnectionLocksResponse, error)
	GetSessionLocks(ctx context.Context, req *v1.GetSessionLocksRequest) (*v1.GetSessionLocksResponse, error)
}

func NewLocksService(endpointService EndpointServiceImpl) LocksServiceImpl {
	return &LocksService{
		endpointService,
	}
}

// LocksService is the endpoint message service for RAS service.
type LocksService struct {
	e EndpointServiceImpl
}

func (x *LocksService) GetLocks(ctx context.Context, req *v1.GetLocksRequest) (*v1.GetLocksResponse, error) {

	var resp v1.GetLocksResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *LocksService) GetInfobaseLocks(ctx context.Context, req *v1.GetInfobaseLocksRequest) (*v1.GetInfobaseLocksResponse, error) {

	var resp v1.GetInfobaseLocksResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *LocksService) GetConnectionLocks(ctx context.Context, req *v1.GetConnectionLocksRequest) (*v1.GetConnectionLocksResponse, error) {

	var resp v1.GetConnectionLocksResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *LocksService) GetSessionLocks(ctx context.Context, req *v1.GetSessionLocksRequest) (*v1.GetSessionLocksResponse, error) {

	var resp v1.GetSessionLocksResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type ConnectionsServiceImpl interface {
	GetConnections(ctx context.Context, req *v1.GetConnectionsRequest) (*v1.GetConnectionsResponse, error)
	GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseConnectionsRequest) (*v1.GetInfobaseConnectionsResponse, error)
	DisconnectConnection(ctx context.Context, req *v1.DisconnectConnectionRequest) (*emptypb.Empty, error)
}

func NewConnectionsService(endpointService EndpointServiceImpl) ConnectionsServiceImpl {
	return &ConnectionsService{
		endpointService,
	}
}

// ConnectionsService is the endpoint message service for RAS service.
type ConnectionsService struct {
	e EndpointServiceImpl
}

func (x *ConnectionsService) GetConnections(ctx context.Context, req *v1.GetConnectionsRequest) (*v1.GetConnectionsResponse, error) {

	var resp v1.GetConnectionsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ConnectionsService) GetInfobaseSessions(ctx context.Context, req *v1.GetInfobaseConnectionsRequest) (*v1.GetInfobaseConnectionsResponse, error) {

	var resp v1.GetInfobaseConnectionsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *ConnectionsService) DisconnectConnection(ctx context.Context, req *v1.DisconnectConnectionRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type AuthServiceImpl interface {
	AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error)
	AuthenticateInfobase(ctx context.Context, req *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error)
	AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest) (*emptypb.Empty, error)
}

func NewAuthService(endpointService EndpointServiceImpl) AuthServiceImpl {
	return &AuthService{
		endpointService,
	}
}

// AuthService is the endpoint message service for RAS service.
type AuthService struct {
	e EndpointServiceImpl
}

func (x *AuthService) AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AuthService) AuthenticateInfobase(ctx context.Context, req *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AuthService) AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

type AdminServiceImpl interface {
	GetVersion(ctx context.Context, req *v1.GetAgentVersionRequest) (*v1.GetAgentVersionResponse, error)
	AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest) (*emptypb.Empty, error)
	AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error)
	GetServerAdmins(ctx context.Context, req *v1.GetAgentAdminsRequest) (*v1.GetAgentAdminsResponse, error)
	GetClustersAdmins(ctx context.Context, req *v1.GetClusterAdminsRequest) (*v1.GetClusterAdminsResponse, error)
	CreateServerAdmin(ctx context.Context, req *v1.CreateAgentAdminRequest) (*emptypb.Empty, error)
	CreateClusterAdmin(ctx context.Context, req *v1.CreateClusterAdminRequest) (*emptypb.Empty, error)
	DeleteServerAdmin(ctx context.Context, req *v1.DeleteAgentAdminRequest) (*emptypb.Empty, error)
	DeleteClusterAdmin(ctx context.Context, req *v1.DeleteClusterAdminRequest) (*emptypb.Empty, error)
}

func NewAdminService(endpointService EndpointServiceImpl) AdminServiceImpl {
	return &AdminService{
		endpointService,
	}
}

// AdminService is the endpoint message service for RAS service.
type AdminService struct {
	e EndpointServiceImpl
}

func (x *AdminService) GetVersion(ctx context.Context, req *v1.GetAgentVersionRequest) (*v1.GetAgentVersionResponse, error) {

	var resp v1.GetAgentVersionResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) AuthenticateServer(ctx context.Context, req *v1.ServerAuthenticateRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) AuthenticateCluster(ctx context.Context, req *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) GetServerAdmins(ctx context.Context, req *v1.GetAgentAdminsRequest) (*v1.GetAgentAdminsResponse, error) {

	var resp v1.GetAgentAdminsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) GetClustersAdmins(ctx context.Context, req *v1.GetClusterAdminsRequest) (*v1.GetClusterAdminsResponse, error) {

	var resp v1.GetClusterAdminsResponse

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) CreateServerAdmin(ctx context.Context, req *v1.CreateAgentAdminRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) CreateClusterAdmin(ctx context.Context, req *v1.CreateClusterAdminRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) DeleteServerAdmin(ctx context.Context, req *v1.DeleteAgentAdminRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (x *AdminService) DeleteClusterAdmin(ctx context.Context, req *v1.DeleteClusterAdminRequest) (*emptypb.Empty, error) {

	var resp emptypb.Empty

	anyRequest, err := anypb.New(req)
	if err != nil {
		return nil, err
	}

	anyRespond, err := anypb.New(&resp)
	if err != nil {
		return nil, err
	}

	endpointRequest := &EndpointRequest{
		Request: anyRequest,
		Respond: anyRespond,
	}

	response, err := x.e.Request(ctx, endpointRequest)
	if err != nil {
		return nil, err
	}

	if err := anypb.UnmarshalTo(response, &resp, proto.UnmarshalOptions{}); err != nil {
		return nil, err
	}
	return &resp, nil
}
