// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clientv1

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RasServiceClient is the client API for RasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RasServiceClient interface {
}

type rasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRasServiceClient(cc grpc.ClientConnInterface) RasServiceClient {
	return &rasServiceClient{cc}
}

// RasServiceServer is the server API for RasService service.
// All implementations should embed UnimplementedRasServiceServer
// for forward compatibility
type RasServiceServer interface {
}

// UnimplementedRasServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRasServiceServer struct {
}

// UnsafeRasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RasServiceServer will
// result in compilation errors.
type UnsafeRasServiceServer interface {
	mustEmbedUnimplementedRasServiceServer()
}

func RegisterRasServiceServer(s grpc.ServiceRegistrar, srv RasServiceServer) {
	s.RegisterService(&RasService_ServiceDesc, srv)
}

// RasService_ServiceDesc is the grpc.ServiceDesc for RasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.client.v1.RasService",
	HandlerType: (*RasServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "ras/client/v1/ras_service.proto",
}
