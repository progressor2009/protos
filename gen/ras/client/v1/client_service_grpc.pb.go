// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clientv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/protocol/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	Negotiate(ctx context.Context, in *v1.NegotiateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Connect(ctx context.Context, in *v1.ConnectMessage, opts ...grpc.CallOption) (*v1.ConnectMessageAck, error)
	Disconnect(ctx context.Context, in *v1.DisconnectMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EndpointOpen(ctx context.Context, in *v1.EndpointOpen, opts ...grpc.CallOption) (*v1.EndpointOpenAck, error)
	EndpointClose(ctx context.Context, in *v1.EndpointClose, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EndpointMessage(ctx context.Context, in *v1.EndpointMessage, opts ...grpc.CallOption) (*v1.EndpointMessage, error)
	NewEndpoint(ctx context.Context, in *v1.EndpointOpenAck, opts ...grpc.CallOption) (*v1.Endpoint, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Negotiate(ctx context.Context, in *v1.NegotiateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/Negotiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Connect(ctx context.Context, in *v1.ConnectMessage, opts ...grpc.CallOption) (*v1.ConnectMessageAck, error) {
	out := new(v1.ConnectMessageAck)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Disconnect(ctx context.Context, in *v1.DisconnectMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EndpointOpen(ctx context.Context, in *v1.EndpointOpen, opts ...grpc.CallOption) (*v1.EndpointOpenAck, error) {
	out := new(v1.EndpointOpenAck)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/EndpointOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EndpointClose(ctx context.Context, in *v1.EndpointClose, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/EndpointClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) EndpointMessage(ctx context.Context, in *v1.EndpointMessage, opts ...grpc.CallOption) (*v1.EndpointMessage, error) {
	out := new(v1.EndpointMessage)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/EndpointMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) NewEndpoint(ctx context.Context, in *v1.EndpointOpenAck, opts ...grpc.CallOption) (*v1.Endpoint, error) {
	out := new(v1.Endpoint)
	err := c.cc.Invoke(ctx, "/ras.client.v1.ClientService/NewEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations should embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	Negotiate(context.Context, *v1.NegotiateMessage) (*emptypb.Empty, error)
	Connect(context.Context, *v1.ConnectMessage) (*v1.ConnectMessageAck, error)
	Disconnect(context.Context, *v1.DisconnectMessage) (*emptypb.Empty, error)
	EndpointOpen(context.Context, *v1.EndpointOpen) (*v1.EndpointOpenAck, error)
	EndpointClose(context.Context, *v1.EndpointClose) (*emptypb.Empty, error)
	EndpointMessage(context.Context, *v1.EndpointMessage) (*v1.EndpointMessage, error)
	NewEndpoint(context.Context, *v1.EndpointOpenAck) (*v1.Endpoint, error)
}

// UnimplementedClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) Negotiate(context.Context, *v1.NegotiateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Negotiate not implemented")
}
func (UnimplementedClientServiceServer) Connect(context.Context, *v1.ConnectMessage) (*v1.ConnectMessageAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedClientServiceServer) Disconnect(context.Context, *v1.DisconnectMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedClientServiceServer) EndpointOpen(context.Context, *v1.EndpointOpen) (*v1.EndpointOpenAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointOpen not implemented")
}
func (UnimplementedClientServiceServer) EndpointClose(context.Context, *v1.EndpointClose) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointClose not implemented")
}
func (UnimplementedClientServiceServer) EndpointMessage(context.Context, *v1.EndpointMessage) (*v1.EndpointMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointMessage not implemented")
}
func (UnimplementedClientServiceServer) NewEndpoint(context.Context, *v1.EndpointOpenAck) (*v1.Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEndpoint not implemented")
}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_Negotiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.NegotiateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Negotiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/Negotiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Negotiate(ctx, req.(*v1.NegotiateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Connect(ctx, req.(*v1.ConnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DisconnectMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Disconnect(ctx, req.(*v1.DisconnectMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EndpointOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EndpointOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EndpointOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/EndpointOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EndpointOpen(ctx, req.(*v1.EndpointOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EndpointClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EndpointClose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EndpointClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/EndpointClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EndpointClose(ctx, req.(*v1.EndpointClose))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_EndpointMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EndpointMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).EndpointMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/EndpointMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).EndpointMessage(ctx, req.(*v1.EndpointMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_NewEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EndpointOpenAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).NewEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.ClientService/NewEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).NewEndpoint(ctx, req.(*v1.EndpointOpenAck))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.client.v1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Negotiate",
			Handler:    _ClientService_Negotiate_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _ClientService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ClientService_Disconnect_Handler,
		},
		{
			MethodName: "EndpointOpen",
			Handler:    _ClientService_EndpointOpen_Handler,
		},
		{
			MethodName: "EndpointClose",
			Handler:    _ClientService_EndpointClose_Handler,
		},
		{
			MethodName: "EndpointMessage",
			Handler:    _ClientService_EndpointMessage_Handler,
		},
		{
			MethodName: "NewEndpoint",
			Handler:    _ClientService_NewEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ras/client/v1/client_service.proto",
}

// EndpointServiceClient is the client API for EndpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointServiceClient interface {
	Request(ctx context.Context, in *v1.EndpointMessage, opts ...grpc.CallOption) (*v1.EndpointMessage, error)
}

type endpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointServiceClient(cc grpc.ClientConnInterface) EndpointServiceClient {
	return &endpointServiceClient{cc}
}

func (c *endpointServiceClient) Request(ctx context.Context, in *v1.EndpointMessage, opts ...grpc.CallOption) (*v1.EndpointMessage, error) {
	out := new(v1.EndpointMessage)
	err := c.cc.Invoke(ctx, "/ras.client.v1.EndpointService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServiceServer is the server API for EndpointService service.
// All implementations should embed UnimplementedEndpointServiceServer
// for forward compatibility
type EndpointServiceServer interface {
	Request(context.Context, *v1.EndpointMessage) (*v1.EndpointMessage, error)
}

// UnimplementedEndpointServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEndpointServiceServer struct {
}

func (UnimplementedEndpointServiceServer) Request(context.Context, *v1.EndpointMessage) (*v1.EndpointMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}

// UnsafeEndpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServiceServer will
// result in compilation errors.
type UnsafeEndpointServiceServer interface {
	mustEmbedUnimplementedEndpointServiceServer()
}

func RegisterEndpointServiceServer(s grpc.ServiceRegistrar, srv EndpointServiceServer) {
	s.RegisterService(&EndpointService_ServiceDesc, srv)
}

func _EndpointService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.EndpointMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.EndpointService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).Request(ctx, req.(*v1.EndpointMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointService_ServiceDesc is the grpc.ServiceDesc for EndpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.client.v1.EndpointService",
	HandlerType: (*EndpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _EndpointService_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ras/client/v1/client_service.proto",
}
