// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clientv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/messages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfobasesServiceClient is the client API for InfobasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfobasesServiceClient interface {
	// GetInfobasesShortRequest
	GetShortInfobases(ctx context.Context, in *v1.GetInfobasesShortRequest, opts ...grpc.CallOption) (*v1.GetInfobasesShortResponse, error)
	CreateInfobase(ctx context.Context, in *v1.CreateInfobaseRequest, opts ...grpc.CallOption) (*v1.CreateInfobaseResponse, error)
	DropInfobase(ctx context.Context, in *v1.DropInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInfobase(ctx context.Context, in *v1.UpdateInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInfobaseSummary(ctx context.Context, in *v1.UpdateInfobaseSummaryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type infobasesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfobasesServiceClient(cc grpc.ClientConnInterface) InfobasesServiceClient {
	return &infobasesServiceClient{cc}
}

func (c *infobasesServiceClient) GetShortInfobases(ctx context.Context, in *v1.GetInfobasesShortRequest, opts ...grpc.CallOption) (*v1.GetInfobasesShortResponse, error) {
	out := new(v1.GetInfobasesShortResponse)
	err := c.cc.Invoke(ctx, "/ras.client.v1.InfobasesService/GetShortInfobases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infobasesServiceClient) CreateInfobase(ctx context.Context, in *v1.CreateInfobaseRequest, opts ...grpc.CallOption) (*v1.CreateInfobaseResponse, error) {
	out := new(v1.CreateInfobaseResponse)
	err := c.cc.Invoke(ctx, "/ras.client.v1.InfobasesService/CreateInfobase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infobasesServiceClient) DropInfobase(ctx context.Context, in *v1.DropInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.InfobasesService/DropInfobase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infobasesServiceClient) UpdateInfobase(ctx context.Context, in *v1.UpdateInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.InfobasesService/UpdateInfobase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infobasesServiceClient) UpdateInfobaseSummary(ctx context.Context, in *v1.UpdateInfobaseSummaryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.client.v1.InfobasesService/UpdateInfobaseSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfobasesServiceServer is the server API for InfobasesService service.
// All implementations should embed UnimplementedInfobasesServiceServer
// for forward compatibility
type InfobasesServiceServer interface {
	// GetInfobasesShortRequest
	GetShortInfobases(context.Context, *v1.GetInfobasesShortRequest) (*v1.GetInfobasesShortResponse, error)
	CreateInfobase(context.Context, *v1.CreateInfobaseRequest) (*v1.CreateInfobaseResponse, error)
	DropInfobase(context.Context, *v1.DropInfobaseRequest) (*emptypb.Empty, error)
	UpdateInfobase(context.Context, *v1.UpdateInfobaseRequest) (*emptypb.Empty, error)
	UpdateInfobaseSummary(context.Context, *v1.UpdateInfobaseSummaryRequest) (*emptypb.Empty, error)
}

// UnimplementedInfobasesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInfobasesServiceServer struct {
}

func (UnimplementedInfobasesServiceServer) GetShortInfobases(context.Context, *v1.GetInfobasesShortRequest) (*v1.GetInfobasesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortInfobases not implemented")
}
func (UnimplementedInfobasesServiceServer) CreateInfobase(context.Context, *v1.CreateInfobaseRequest) (*v1.CreateInfobaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfobase not implemented")
}
func (UnimplementedInfobasesServiceServer) DropInfobase(context.Context, *v1.DropInfobaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropInfobase not implemented")
}
func (UnimplementedInfobasesServiceServer) UpdateInfobase(context.Context, *v1.UpdateInfobaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfobase not implemented")
}
func (UnimplementedInfobasesServiceServer) UpdateInfobaseSummary(context.Context, *v1.UpdateInfobaseSummaryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfobaseSummary not implemented")
}

// UnsafeInfobasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfobasesServiceServer will
// result in compilation errors.
type UnsafeInfobasesServiceServer interface {
	mustEmbedUnimplementedInfobasesServiceServer()
}

func RegisterInfobasesServiceServer(s grpc.ServiceRegistrar, srv InfobasesServiceServer) {
	s.RegisterService(&InfobasesService_ServiceDesc, srv)
}

func _InfobasesService_GetShortInfobases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetInfobasesShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfobasesServiceServer).GetShortInfobases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.InfobasesService/GetShortInfobases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfobasesServiceServer).GetShortInfobases(ctx, req.(*v1.GetInfobasesShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfobasesService_CreateInfobase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateInfobaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfobasesServiceServer).CreateInfobase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.InfobasesService/CreateInfobase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfobasesServiceServer).CreateInfobase(ctx, req.(*v1.CreateInfobaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfobasesService_DropInfobase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DropInfobaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfobasesServiceServer).DropInfobase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.InfobasesService/DropInfobase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfobasesServiceServer).DropInfobase(ctx, req.(*v1.DropInfobaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfobasesService_UpdateInfobase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateInfobaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfobasesServiceServer).UpdateInfobase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.InfobasesService/UpdateInfobase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfobasesServiceServer).UpdateInfobase(ctx, req.(*v1.UpdateInfobaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfobasesService_UpdateInfobaseSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateInfobaseSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfobasesServiceServer).UpdateInfobaseSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.client.v1.InfobasesService/UpdateInfobaseSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfobasesServiceServer).UpdateInfobaseSummary(ctx, req.(*v1.UpdateInfobaseSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfobasesService_ServiceDesc is the grpc.ServiceDesc for InfobasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfobasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.client.v1.InfobasesService",
	HandlerType: (*InfobasesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortInfobases",
			Handler:    _InfobasesService_GetShortInfobases_Handler,
		},
		{
			MethodName: "CreateInfobase",
			Handler:    _InfobasesService_CreateInfobase_Handler,
		},
		{
			MethodName: "DropInfobase",
			Handler:    _InfobasesService_DropInfobase_Handler,
		},
		{
			MethodName: "UpdateInfobase",
			Handler:    _InfobasesService_UpdateInfobase_Handler,
		},
		{
			MethodName: "UpdateInfobaseSummary",
			Handler:    _InfobasesService_UpdateInfobaseSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ras/client/v1/infonases_service.proto",
}
