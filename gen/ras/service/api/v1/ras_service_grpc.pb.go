// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apiv1

import (
	context "context"
	v1 "github.com/v8platform/protos/gen/ras/messages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RASServiceClient is the client API for RASService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RASServiceClient interface {
	// Auth
	AuthenticateCluster(ctx context.Context, in *v1.ClusterAuthenticateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthenticateInfobase(ctx context.Context, in *v1.AuthenticateInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthenticateAgent(ctx context.Context, in *v1.AuthenticateAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Clusters
	GetClusters(ctx context.Context, in *v1.GetClustersRequest, opts ...grpc.CallOption) (*v1.GetClustersResponse, error)
	GetClusterInfo(ctx context.Context, in *v1.GetClusterInfoRequest, opts ...grpc.CallOption) (*v1.GetClusterInfoResponse, error)
	RegCluster(ctx context.Context, in *v1.RegClusterRequest, opts ...grpc.CallOption) (*v1.RegClusterResponse, error)
	UnregCluster(ctx context.Context, in *v1.UnregClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sessions
	GetSessions(ctx context.Context, in *v1.GetSessionsRequest, opts ...grpc.CallOption) (*v1.GetSessionsResponse, error)
	// infobases
	// GetInfobasesShortRequest
	GetShortInfobases(ctx context.Context, in *v1.GetInfobasesShortRequest, opts ...grpc.CallOption) (*v1.GetInfobasesShortResponse, error)
	// GetInfobaseSessionsRequest
	GetInfobaseSessions(ctx context.Context, in *v1.GetInfobaseSessionsRequest, opts ...grpc.CallOption) (*v1.GetInfobaseSessionsResponse, error)
}

type rASServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRASServiceClient(cc grpc.ClientConnInterface) RASServiceClient {
	return &rASServiceClient{cc}
}

func (c *rASServiceClient) AuthenticateCluster(ctx context.Context, in *v1.ClusterAuthenticateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/AuthenticateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) AuthenticateInfobase(ctx context.Context, in *v1.AuthenticateInfobaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/AuthenticateInfobase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) AuthenticateAgent(ctx context.Context, in *v1.AuthenticateAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/AuthenticateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) GetClusters(ctx context.Context, in *v1.GetClustersRequest, opts ...grpc.CallOption) (*v1.GetClustersResponse, error) {
	out := new(v1.GetClustersResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) GetClusterInfo(ctx context.Context, in *v1.GetClusterInfoRequest, opts ...grpc.CallOption) (*v1.GetClusterInfoResponse, error) {
	out := new(v1.GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) RegCluster(ctx context.Context, in *v1.RegClusterRequest, opts ...grpc.CallOption) (*v1.RegClusterResponse, error) {
	out := new(v1.RegClusterResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/RegCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) UnregCluster(ctx context.Context, in *v1.UnregClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/UnregCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) GetSessions(ctx context.Context, in *v1.GetSessionsRequest, opts ...grpc.CallOption) (*v1.GetSessionsResponse, error) {
	out := new(v1.GetSessionsResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) GetShortInfobases(ctx context.Context, in *v1.GetInfobasesShortRequest, opts ...grpc.CallOption) (*v1.GetInfobasesShortResponse, error) {
	out := new(v1.GetInfobasesShortResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/GetShortInfobases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rASServiceClient) GetInfobaseSessions(ctx context.Context, in *v1.GetInfobaseSessionsRequest, opts ...grpc.CallOption) (*v1.GetInfobaseSessionsResponse, error) {
	out := new(v1.GetInfobaseSessionsResponse)
	err := c.cc.Invoke(ctx, "/ras.service.api.v1.RASService/GetInfobaseSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RASServiceServer is the server API for RASService service.
// All implementations should embed UnimplementedRASServiceServer
// for forward compatibility
type RASServiceServer interface {
	// Auth
	AuthenticateCluster(context.Context, *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error)
	AuthenticateInfobase(context.Context, *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error)
	AuthenticateAgent(context.Context, *v1.AuthenticateAgentRequest) (*emptypb.Empty, error)
	// Clusters
	GetClusters(context.Context, *v1.GetClustersRequest) (*v1.GetClustersResponse, error)
	GetClusterInfo(context.Context, *v1.GetClusterInfoRequest) (*v1.GetClusterInfoResponse, error)
	RegCluster(context.Context, *v1.RegClusterRequest) (*v1.RegClusterResponse, error)
	UnregCluster(context.Context, *v1.UnregClusterRequest) (*emptypb.Empty, error)
	// Sessions
	GetSessions(context.Context, *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error)
	// infobases
	// GetInfobasesShortRequest
	GetShortInfobases(context.Context, *v1.GetInfobasesShortRequest) (*v1.GetInfobasesShortResponse, error)
	// GetInfobaseSessionsRequest
	GetInfobaseSessions(context.Context, *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error)
}

// UnimplementedRASServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRASServiceServer struct {
}

func (UnimplementedRASServiceServer) AuthenticateCluster(context.Context, *v1.ClusterAuthenticateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateCluster not implemented")
}
func (UnimplementedRASServiceServer) AuthenticateInfobase(context.Context, *v1.AuthenticateInfobaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateInfobase not implemented")
}
func (UnimplementedRASServiceServer) AuthenticateAgent(context.Context, *v1.AuthenticateAgentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAgent not implemented")
}
func (UnimplementedRASServiceServer) GetClusters(context.Context, *v1.GetClustersRequest) (*v1.GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedRASServiceServer) GetClusterInfo(context.Context, *v1.GetClusterInfoRequest) (*v1.GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedRASServiceServer) RegCluster(context.Context, *v1.RegClusterRequest) (*v1.RegClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegCluster not implemented")
}
func (UnimplementedRASServiceServer) UnregCluster(context.Context, *v1.UnregClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregCluster not implemented")
}
func (UnimplementedRASServiceServer) GetSessions(context.Context, *v1.GetSessionsRequest) (*v1.GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedRASServiceServer) GetShortInfobases(context.Context, *v1.GetInfobasesShortRequest) (*v1.GetInfobasesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortInfobases not implemented")
}
func (UnimplementedRASServiceServer) GetInfobaseSessions(context.Context, *v1.GetInfobaseSessionsRequest) (*v1.GetInfobaseSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfobaseSessions not implemented")
}

// UnsafeRASServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RASServiceServer will
// result in compilation errors.
type UnsafeRASServiceServer interface {
	mustEmbedUnimplementedRASServiceServer()
}

func RegisterRASServiceServer(s grpc.ServiceRegistrar, srv RASServiceServer) {
	s.RegisterService(&RASService_ServiceDesc, srv)
}

func _RASService_AuthenticateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ClusterAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).AuthenticateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/AuthenticateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).AuthenticateCluster(ctx, req.(*v1.ClusterAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_AuthenticateInfobase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthenticateInfobaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).AuthenticateInfobase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/AuthenticateInfobase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).AuthenticateInfobase(ctx, req.(*v1.AuthenticateInfobaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_AuthenticateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AuthenticateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).AuthenticateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/AuthenticateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).AuthenticateAgent(ctx, req.(*v1.AuthenticateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).GetClusters(ctx, req.(*v1.GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).GetClusterInfo(ctx, req.(*v1.GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_RegCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RegClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).RegCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/RegCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).RegCluster(ctx, req.(*v1.RegClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_UnregCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UnregClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).UnregCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/UnregCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).UnregCluster(ctx, req.(*v1.UnregClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).GetSessions(ctx, req.(*v1.GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_GetShortInfobases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetInfobasesShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).GetShortInfobases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/GetShortInfobases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).GetShortInfobases(ctx, req.(*v1.GetInfobasesShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RASService_GetInfobaseSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetInfobaseSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RASServiceServer).GetInfobaseSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.service.api.v1.RASService/GetInfobaseSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RASServiceServer).GetInfobaseSessions(ctx, req.(*v1.GetInfobaseSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RASService_ServiceDesc is the grpc.ServiceDesc for RASService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RASService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.service.api.v1.RASService",
	HandlerType: (*RASServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateCluster",
			Handler:    _RASService_AuthenticateCluster_Handler,
		},
		{
			MethodName: "AuthenticateInfobase",
			Handler:    _RASService_AuthenticateInfobase_Handler,
		},
		{
			MethodName: "AuthenticateAgent",
			Handler:    _RASService_AuthenticateAgent_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _RASService_GetClusters_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _RASService_GetClusterInfo_Handler,
		},
		{
			MethodName: "RegCluster",
			Handler:    _RASService_RegCluster_Handler,
		},
		{
			MethodName: "UnregCluster",
			Handler:    _RASService_UnregCluster_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _RASService_GetSessions_Handler,
		},
		{
			MethodName: "GetShortInfobases",
			Handler:    _RASService_GetShortInfobases_Handler,
		},
		{
			MethodName: "GetInfobaseSessions",
			Handler:    _RASService_GetInfobaseSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ras/service/api/v1/ras_service.proto",
}
