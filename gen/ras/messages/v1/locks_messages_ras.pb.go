// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package messagesv1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	v1 "github.com/v8platform/protos/gen/v8platform/serialize/v1"
	io "io"
)

func (x *GetLocksRequest) GetMessageType() MessageType {
	return MessageType_GET_LOCKS_REQUEST
}

func (x *GetLocksRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetLocksRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetLocksResponse) GetMessageType() MessageType {
	return MessageType_GET_LOCKS_RESPONSE
}

func (x *GetLocksResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	var size_Locks int
	if err := codec256.ParseSize(reader, &size_Locks); err != nil {
		return err
	}
	for i := 0; i < size_Locks; i++ {
		val := &v1.LockInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Locks = append(x.Locks, val)
	}
	return nil
}
func (x *GetLocksResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	if err := codec256.FormatSize(writer, len(x.Locks)); err != nil {
		return err
	}
	for i := 0; i < len(x.Locks); i++ {
		if err := x.Locks[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	return nil
}
func (x *GetInfobaseLocksRequest) GetMessageType() MessageType {
	return MessageType_GET_INFOBASE_LOCKS_REQUEST
}

func (x *GetInfobaseLocksRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:2
	if err := codec256.ParseUUID(reader, &x.InfobaseId); err != nil {
		return err
	}
	return nil
}
func (x *GetInfobaseLocksRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:2
	if err := codec256.FormatUuid(writer, x.InfobaseId); err != nil {
		return err
	}
	return nil
}
func (x *GetInfobaseLocksResponse) GetMessageType() MessageType {
	return MessageType_GET_INFOBASE_LOCKS_RESPONSE
}

func (x *GetInfobaseLocksResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	var size_Locks int
	if err := codec256.ParseSize(reader, &size_Locks); err != nil {
		return err
	}
	for i := 0; i < size_Locks; i++ {
		val := &v1.LockInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Locks = append(x.Locks, val)
	}
	return nil
}
func (x *GetInfobaseLocksResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	if err := codec256.FormatSize(writer, len(x.Locks)); err != nil {
		return err
	}
	for i := 0; i < len(x.Locks); i++ {
		if err := x.Locks[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	return nil
}
func (x *GetConnectionLocksRequest) GetMessageType() MessageType {
	return MessageType_GET_CONNECTION_LOCKS_REQUEST
}

func (x *GetConnectionLocksRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.ConnectionId opts: encoder:"uuid" order:2
	if err := codec256.ParseUUID(reader, &x.ConnectionId); err != nil {
		return err
	}
	return nil
}
func (x *GetConnectionLocksRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.ConnectionId opts: encoder:"uuid" order:2
	if err := codec256.FormatUuid(writer, x.ConnectionId); err != nil {
		return err
	}
	return nil
}
func (x *GetConnectionLocksResponse) GetMessageType() MessageType {
	return MessageType_GET_CONNECTION_LOCKS_RESPONSE
}

func (x *GetConnectionLocksResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	var size_Locks int
	if err := codec256.ParseSize(reader, &size_Locks); err != nil {
		return err
	}
	for i := 0; i < size_Locks; i++ {
		val := &v1.LockInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Locks = append(x.Locks, val)
	}
	return nil
}
func (x *GetConnectionLocksResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	if err := codec256.FormatSize(writer, len(x.Locks)); err != nil {
		return err
	}
	for i := 0; i < len(x.Locks); i++ {
		if err := x.Locks[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	return nil
}
func (x *GetSessionLocksRequest) GetMessageType() MessageType {
	return MessageType_GET_SESSION_LOCKS_REQUEST
}

func (x *GetSessionLocksRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:2
	if err := codec256.ParseUUID(reader, &x.InfobaseId); err != nil {
		return err
	}
	// decode x.SessionId opts: encoder:"uuid" order:3
	if err := codec256.ParseUUID(reader, &x.SessionId); err != nil {
		return err
	}
	return nil
}
func (x *GetSessionLocksRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:2
	if err := codec256.FormatUuid(writer, x.InfobaseId); err != nil {
		return err
	}
	// decode x.SessionId opts: encoder:"uuid" order:3
	if err := codec256.FormatUuid(writer, x.SessionId); err != nil {
		return err
	}
	return nil
}
func (x *GetSessionLocksResponse) GetMessageType() MessageType {
	return MessageType_GET_SESSION_LOCKS_RESPONSE
}

func (x *GetSessionLocksResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	var size_Locks int
	if err := codec256.ParseSize(reader, &size_Locks); err != nil {
		return err
	}
	for i := 0; i < size_Locks; i++ {
		val := &v1.LockInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Locks = append(x.Locks, val)
	}
	return nil
}
func (x *GetSessionLocksResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Locks opts: order:1
	if err := codec256.FormatSize(writer, len(x.Locks)); err != nil {
		return err
	}
	for i := 0; i < len(x.Locks); i++ {
		if err := x.Locks[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	return nil
}
