// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ras/messages/v1/infobases_messages.proto

package messagesv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/v8platform/protoc-gen-go-ras/plugin/ras/encoding"
	v1 "github.com/v8platform/protos/gen/v8platform/serialize/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateInfobaseRequest_CreateMode int32

const (
	CreateInfobaseRequest_NoCreate CreateInfobaseRequest_CreateMode = 0
	CreateInfobaseRequest_Create   CreateInfobaseRequest_CreateMode = 1
)

// Enum value maps for CreateInfobaseRequest_CreateMode.
var (
	CreateInfobaseRequest_CreateMode_name = map[int32]string{
		0: "NoCreate",
		1: "Create",
	}
	CreateInfobaseRequest_CreateMode_value = map[string]int32{
		"NoCreate": 0,
		"Create":   1,
	}
)

func (x CreateInfobaseRequest_CreateMode) Enum() *CreateInfobaseRequest_CreateMode {
	p := new(CreateInfobaseRequest_CreateMode)
	*p = x
	return p
}

func (x CreateInfobaseRequest_CreateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateInfobaseRequest_CreateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ras_messages_v1_infobases_messages_proto_enumTypes[0].Descriptor()
}

func (CreateInfobaseRequest_CreateMode) Type() protoreflect.EnumType {
	return &file_ras_messages_v1_infobases_messages_proto_enumTypes[0]
}

func (x CreateInfobaseRequest_CreateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateInfobaseRequest_CreateMode.Descriptor instead.
func (CreateInfobaseRequest_CreateMode) EnumDescriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{6, 0}
}

type DropInfobaseRequest_DropMode int32

const (
	DropInfobaseRequest_NoDrop DropInfobaseRequest_DropMode = 0
	DropInfobaseRequest_Drop   DropInfobaseRequest_DropMode = 1
)

// Enum value maps for DropInfobaseRequest_DropMode.
var (
	DropInfobaseRequest_DropMode_name = map[int32]string{
		0: "NoDrop",
		1: "Drop",
	}
	DropInfobaseRequest_DropMode_value = map[string]int32{
		"NoDrop": 0,
		"Drop":   1,
	}
)

func (x DropInfobaseRequest_DropMode) Enum() *DropInfobaseRequest_DropMode {
	p := new(DropInfobaseRequest_DropMode)
	*p = x
	return p
}

func (x DropInfobaseRequest_DropMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropInfobaseRequest_DropMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ras_messages_v1_infobases_messages_proto_enumTypes[1].Descriptor()
}

func (DropInfobaseRequest_DropMode) Type() protoreflect.EnumType {
	return &file_ras_messages_v1_infobases_messages_proto_enumTypes[1]
}

func (x DropInfobaseRequest_DropMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropInfobaseRequest_DropMode.Descriptor instead.
func (DropInfobaseRequest_DropMode) EnumDescriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{8, 0}
}

// Renamed GetInfobasesShortRequest
type GetInfobasesSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetInfobasesSummaryRequest) Reset() {
	*x = GetInfobasesSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobasesSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobasesSummaryRequest) ProtoMessage() {}

func (x *GetInfobasesSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobasesSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetInfobasesSummaryRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{0}
}

func (x *GetInfobasesSummaryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Renamed GetInfobasesShortResponse
type GetInfobasesSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infobases []*v1.InfobaseSummaryInfo `protobuf:"bytes,1,rep,name=infobases,proto3" json:"infobases,omitempty"`
}

func (x *GetInfobasesSummaryResponse) Reset() {
	*x = GetInfobasesSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobasesSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobasesSummaryResponse) ProtoMessage() {}

func (x *GetInfobasesSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobasesSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetInfobasesSummaryResponse) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfobasesSummaryResponse) GetInfobases() []*v1.InfobaseSummaryInfo {
	if x != nil {
		return x.Infobases
	}
	return nil
}

// Renamed GetInfobasesShortRequest
type GetInfobasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetInfobasesRequest) Reset() {
	*x = GetInfobasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobasesRequest) ProtoMessage() {}

func (x *GetInfobasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobasesRequest.ProtoReflect.Descriptor instead.
func (*GetInfobasesRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{2}
}

func (x *GetInfobasesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Renamed GetInfobasesShortResponse
type GetInfobasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infobases []*v1.InfobaseInfo `protobuf:"bytes,1,rep,name=infobases,proto3" json:"infobases,omitempty"`
}

func (x *GetInfobasesResponse) Reset() {
	*x = GetInfobasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobasesResponse) ProtoMessage() {}

func (x *GetInfobasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobasesResponse.ProtoReflect.Descriptor instead.
func (*GetInfobasesResponse) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{3}
}

func (x *GetInfobasesResponse) GetInfobases() []*v1.InfobaseInfo {
	if x != nil {
		return x.Infobases
	}
	return nil
}

type GetInfobaseInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	InfobaseId string `protobuf:"bytes,2,opt,name=infobase_id,json=infobaseId,proto3" json:"infobase_id,omitempty"`
}

func (x *GetInfobaseInfoRequest) Reset() {
	*x = GetInfobaseInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobaseInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobaseInfoRequest) ProtoMessage() {}

func (x *GetInfobaseInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobaseInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfobaseInfoRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{4}
}

func (x *GetInfobaseInfoRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetInfobaseInfoRequest) GetInfobaseId() string {
	if x != nil {
		return x.InfobaseId
	}
	return ""
}

type GetInfobaseInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *v1.InfobaseInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetInfobaseInfoResponse) Reset() {
	*x = GetInfobaseInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfobaseInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfobaseInfoResponse) ProtoMessage() {}

func (x *GetInfobaseInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfobaseInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfobaseInfoResponse) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{5}
}

func (x *GetInfobaseInfoResponse) GetInfo() *v1.InfobaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateInfobaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string           `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Info      *v1.InfobaseInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Mode      int32            `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *CreateInfobaseRequest) Reset() {
	*x = CreateInfobaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInfobaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInfobaseRequest) ProtoMessage() {}

func (x *CreateInfobaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInfobaseRequest.ProtoReflect.Descriptor instead.
func (*CreateInfobaseRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CreateInfobaseRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateInfobaseRequest) GetInfo() *v1.InfobaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CreateInfobaseRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type CreateInfobaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfobaseId string `protobuf:"bytes,1,opt,name=infobase_id,json=infobaseId,proto3" json:"infobase_id,omitempty"`
}

func (x *CreateInfobaseResponse) Reset() {
	*x = CreateInfobaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInfobaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInfobaseResponse) ProtoMessage() {}

func (x *CreateInfobaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInfobaseResponse.ProtoReflect.Descriptor instead.
func (*CreateInfobaseResponse) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CreateInfobaseResponse) GetInfobaseId() string {
	if x != nil {
		return x.InfobaseId
	}
	return ""
}

type DropInfobaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	InfobaseId string `protobuf:"bytes,2,opt,name=infobase_id,json=infobaseId,proto3" json:"infobase_id,omitempty"`
	Mode       int32  `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *DropInfobaseRequest) Reset() {
	*x = DropInfobaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropInfobaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropInfobaseRequest) ProtoMessage() {}

func (x *DropInfobaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropInfobaseRequest.ProtoReflect.Descriptor instead.
func (*DropInfobaseRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{8}
}

func (x *DropInfobaseRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DropInfobaseRequest) GetInfobaseId() string {
	if x != nil {
		return x.InfobaseId
	}
	return ""
}

func (x *DropInfobaseRequest) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// Rename UpdateInfobaseShortRequest
type UpdateInfobaseSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string                  `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Summary   *v1.InfobaseSummaryInfo `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *UpdateInfobaseSummaryRequest) Reset() {
	*x = UpdateInfobaseSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfobaseSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfobaseSummaryRequest) ProtoMessage() {}

func (x *UpdateInfobaseSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfobaseSummaryRequest.ProtoReflect.Descriptor instead.
func (*UpdateInfobaseSummaryRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateInfobaseSummaryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateInfobaseSummaryRequest) GetSummary() *v1.InfobaseSummaryInfo {
	if x != nil {
		return x.Summary
	}
	return nil
}

type UpdateInfobaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string           `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Info      *v1.InfobaseInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateInfobaseRequest) Reset() {
	*x = UpdateInfobaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfobaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfobaseRequest) ProtoMessage() {}

func (x *UpdateInfobaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ras_messages_v1_infobases_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfobaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateInfobaseRequest) Descriptor() ([]byte, []int) {
	return file_ras_messages_v1_infobases_messages_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateInfobaseRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateInfobaseRequest) GetInfo() *v1.InfobaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_ras_messages_v1_infobases_messages_proto protoreflect.FileDescriptor

var file_ras_messages_v1_infobases_messages_proto_rawDesc = []byte{
	0x0a, 0x28, 0x72, 0x61, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x61, 0x73, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x72, 0x61, 0x73,
	0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x61, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x76, 0x38, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x76, 0x38,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x32,
	0x55, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0,
	0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,
	0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x74,
	0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x21, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x1d, 0x3a, 0x1b, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x42, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x38, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x24, 0x8a, 0xf5, 0xea, 0x94,
	0x0e, 0x1e, 0x3a, 0x1c, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45,
	0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x22, 0xd1, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01,
	0x92, 0x41, 0xa6, 0x01, 0x32, 0x55, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0,
	0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b,
	0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d,
	0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31,
	0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x3a, 0x5f, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x19, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x17, 0x3a, 0x15, 0x47,
	0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x38, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x1e, 0x8a, 0xf5,
	0xea, 0x94, 0x0e, 0x18, 0x3a, 0x16, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41,
	0x53, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0xd4, 0x04, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92,
	0x41, 0xa6, 0x01, 0x32, 0x55, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0,
	0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d,
	0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46,
	0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0xeb, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x32,
	0x66, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1,
	0x86, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0, 0xb1,
	0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x8b, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1,
	0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2,
	0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x10, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x3a, 0x71, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x16, 0x47, 0x65, 0x74, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x1b, 0x3a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x76, 0x38, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x22, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x1c, 0x3a, 0x1a, 0x47, 0x45,
	0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0xf6, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x32, 0x55,
	0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd,
	0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
	0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20,
	0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46,
	0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d,
	0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38,
	0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x38,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x08, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x02, 0x10, 0x02, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0d, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x07, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x10, 0x03, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x3a, 0x72, 0x92,
	0x41, 0x50, 0x0a, 0x4e, 0x2a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x19, 0x3a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xeb, 0x01, 0x0a,
	0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x32, 0x66, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20,
	0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8,
	0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,
	0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0,
	0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x8b,
	0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30,
	0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x8a, 0xf5, 0xea, 0x94,
	0x0e, 0x1a, 0x3a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x22, 0x91, 0x05, 0x0a,
	0x13, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xa6, 0x01,
	0x32, 0x55, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1,
	0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	0x80, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd,
	0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1,
	0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41,
	0x2d, 0x46, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x34, 0x7d, 0x2d, 0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d,
	0x5b, 0x38, 0x39, 0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2,
	0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0xeb, 0x01, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x32, 0x66, 0xd0, 0xa3,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b,
	0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
	0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xb8,
	0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8,
	0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0,
	0xb7, 0xd1, 0x8b, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10,
	0x02, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xf5, 0xea,
	0x94, 0x0e, 0x07, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x10, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x20, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70,
	0x10, 0x01, 0x3a, 0x6c, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18,
	0x44, 0x72, 0x6f, 0x70, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x17, 0x3a, 0x15, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x22, 0xd3, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x32, 0x55, 0xd0,
	0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8,
	0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0,
	0xbb, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d,
	0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d,
	0x34, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39,
	0x41, 0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10,
	0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x76, 0x38, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x82, 0xf5, 0xea,
	0x94, 0x0e, 0x02, 0x10, 0x02, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x85,
	0x01, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xd2, 0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x8a, 0xf5, 0xea, 0x94, 0x0e, 0x1f, 0x3a, 0x1d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x22, 0xa2, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0xd8, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x32, 0x55, 0xd0, 0xa3,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b,
	0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
	0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xbb,
	0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3,
	0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb0, 0x8a, 0x01, 0x45, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b,
	0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x34,
	0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x38, 0x39, 0x41,
	0x42, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x33, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x41, 0x2d, 0x46, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0x24, 0xa2, 0x02, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x01,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x38, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x08, 0x82, 0xf5, 0xea, 0x94, 0x0e, 0x02, 0x10, 0x02, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x3a, 0x69, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0xd2,
	0x01, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x8a, 0xf5, 0xea, 0x94,
	0x0e, 0x19, 0x3a, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x42, 0xc8, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x16, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x38, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x72, 0x61, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x4d, 0x58,
	0xaa, 0x02, 0x0f, 0x52, 0x61, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0f, 0x52, 0x61, 0x73, 0x5c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x52, 0x61, 0x73, 0x5c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x11, 0x52, 0x61, 0x73, 0x3a, 0x3a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ras_messages_v1_infobases_messages_proto_rawDescOnce sync.Once
	file_ras_messages_v1_infobases_messages_proto_rawDescData = file_ras_messages_v1_infobases_messages_proto_rawDesc
)

func file_ras_messages_v1_infobases_messages_proto_rawDescGZIP() []byte {
	file_ras_messages_v1_infobases_messages_proto_rawDescOnce.Do(func() {
		file_ras_messages_v1_infobases_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_ras_messages_v1_infobases_messages_proto_rawDescData)
	})
	return file_ras_messages_v1_infobases_messages_proto_rawDescData
}

var file_ras_messages_v1_infobases_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ras_messages_v1_infobases_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_ras_messages_v1_infobases_messages_proto_goTypes = []interface{}{
	(CreateInfobaseRequest_CreateMode)(0), // 0: ras.messages.v1.CreateInfobaseRequest.CreateMode
	(DropInfobaseRequest_DropMode)(0),     // 1: ras.messages.v1.DropInfobaseRequest.DropMode
	(*GetInfobasesSummaryRequest)(nil),    // 2: ras.messages.v1.GetInfobasesSummaryRequest
	(*GetInfobasesSummaryResponse)(nil),   // 3: ras.messages.v1.GetInfobasesSummaryResponse
	(*GetInfobasesRequest)(nil),           // 4: ras.messages.v1.GetInfobasesRequest
	(*GetInfobasesResponse)(nil),          // 5: ras.messages.v1.GetInfobasesResponse
	(*GetInfobaseInfoRequest)(nil),        // 6: ras.messages.v1.GetInfobaseInfoRequest
	(*GetInfobaseInfoResponse)(nil),       // 7: ras.messages.v1.GetInfobaseInfoResponse
	(*CreateInfobaseRequest)(nil),         // 8: ras.messages.v1.CreateInfobaseRequest
	(*CreateInfobaseResponse)(nil),        // 9: ras.messages.v1.CreateInfobaseResponse
	(*DropInfobaseRequest)(nil),           // 10: ras.messages.v1.DropInfobaseRequest
	(*UpdateInfobaseSummaryRequest)(nil),  // 11: ras.messages.v1.UpdateInfobaseSummaryRequest
	(*UpdateInfobaseRequest)(nil),         // 12: ras.messages.v1.UpdateInfobaseRequest
	(*v1.InfobaseSummaryInfo)(nil),        // 13: v8platform.serialize.v1.InfobaseSummaryInfo
	(*v1.InfobaseInfo)(nil),               // 14: v8platform.serialize.v1.InfobaseInfo
}
var file_ras_messages_v1_infobases_messages_proto_depIdxs = []int32{
	13, // 0: ras.messages.v1.GetInfobasesSummaryResponse.infobases:type_name -> v8platform.serialize.v1.InfobaseSummaryInfo
	14, // 1: ras.messages.v1.GetInfobasesResponse.infobases:type_name -> v8platform.serialize.v1.InfobaseInfo
	14, // 2: ras.messages.v1.GetInfobaseInfoResponse.info:type_name -> v8platform.serialize.v1.InfobaseInfo
	14, // 3: ras.messages.v1.CreateInfobaseRequest.info:type_name -> v8platform.serialize.v1.InfobaseInfo
	13, // 4: ras.messages.v1.UpdateInfobaseSummaryRequest.summary:type_name -> v8platform.serialize.v1.InfobaseSummaryInfo
	14, // 5: ras.messages.v1.UpdateInfobaseRequest.info:type_name -> v8platform.serialize.v1.InfobaseInfo
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_ras_messages_v1_infobases_messages_proto_init() }
func file_ras_messages_v1_infobases_messages_proto_init() {
	if File_ras_messages_v1_infobases_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ras_messages_v1_infobases_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobasesSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobasesSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobaseInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfobaseInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInfobaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInfobaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropInfobaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfobaseSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ras_messages_v1_infobases_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfobaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ras_messages_v1_infobases_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ras_messages_v1_infobases_messages_proto_goTypes,
		DependencyIndexes: file_ras_messages_v1_infobases_messages_proto_depIdxs,
		EnumInfos:         file_ras_messages_v1_infobases_messages_proto_enumTypes,
		MessageInfos:      file_ras_messages_v1_infobases_messages_proto_msgTypes,
	}.Build()
	File_ras_messages_v1_infobases_messages_proto = out.File
	file_ras_messages_v1_infobases_messages_proto_rawDesc = nil
	file_ras_messages_v1_infobases_messages_proto_goTypes = nil
	file_ras_messages_v1_infobases_messages_proto_depIdxs = nil
}
