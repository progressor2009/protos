// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package messagesv1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	io "io"
)

func (x *ServerAuthenticateRequest) GetMessageType() MessageType {
	return MessageType_AUTHENTICATE_AGENT_REQUEST
}

func (x *ServerAuthenticateRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.User opts: order:1
	if err := codec256.ParseString(reader, &x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:2
	if err := codec256.ParseString(reader, &x.Password); err != nil {
		return err
	}
	return nil
}
func (x *ServerAuthenticateRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.User opts: order:1
	if err := codec256.FormatString(writer, x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:2
	if err := codec256.FormatString(writer, x.Password); err != nil {
		return err
	}
	return nil
}
func (x *ClusterAuthenticateRequest) GetMessageType() MessageType {
	return MessageType_AUTHENTICATE_REQUEST
}

func (x *ClusterAuthenticateRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.User opts: order:2
	if err := codec256.ParseString(reader, &x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:3
	if err := codec256.ParseString(reader, &x.Password); err != nil {
		return err
	}
	return nil
}
func (x *ClusterAuthenticateRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.User opts: order:2
	if err := codec256.FormatString(writer, x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:3
	if err := codec256.FormatString(writer, x.Password); err != nil {
		return err
	}
	return nil
}
func (x *AuthenticateInfobaseRequest) GetMessageType() MessageType {
	return MessageType_ADD_AUTHENTICATION_REQUEST
}

func (x *AuthenticateInfobaseRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.User opts: order:2
	if err := codec256.ParseString(reader, &x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:3
	if err := codec256.ParseString(reader, &x.Password); err != nil {
		return err
	}
	return nil
}
func (x *AuthenticateInfobaseRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.User opts: order:2
	if err := codec256.FormatString(writer, x.User); err != nil {
		return err
	}
	// decode x.Password opts: order:3
	if err := codec256.FormatString(writer, x.Password); err != nil {
		return err
	}
	return nil
}
