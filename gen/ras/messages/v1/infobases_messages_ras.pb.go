// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package messagesv1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	v1 "github.com/v8platform/protos/gen/v8platform/serialize/v1"
	io "io"
)

func (x *GetInfobasesShortRequest) GetMessageType() MessageType {
	return MessageType_GET_INFOBASES_SHORT_REQUEST
}

func (x *GetInfobasesShortRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetInfobasesShortRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetInfobasesShortResponse) GetMessageType() MessageType {
	return MessageType_GET_INFOBASES_SHORT_RESPONSE
}

func (x *GetInfobasesShortResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Sessions opts: order:1
	var size_Sessions int
	if err := codec256.ParseSize(reader, &size_Sessions); err != nil {
		return err
	}
	for i := 0; i < size_Sessions; i++ {
		val := &v1.InfobaseSummaryInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Sessions = append(x.Sessions, val)
	}
	return nil
}
func (x *GetInfobasesShortResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Sessions opts: order:1
	if err := codec256.FormatSize(writer, len(x.Sessions)); err != nil {
		return err
	}
	for i := 0; i < len(x.Sessions); i++ {
		if err := x.Sessions[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	return nil
}
