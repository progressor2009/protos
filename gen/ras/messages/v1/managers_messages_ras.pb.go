// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package messagesv1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	v1 "github.com/v8platform/protos/gen/v8platform/serialize/v1"
	io "io"
)

func (x *GetClusterManagersRequest) GetMessageType() MessageType {
	return MessageType_GET_CLUSTER_MANAGERS_REQUEST
}

func (x *GetClusterManagersRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetClusterManagersRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	return nil
}
func (x *GetClusterManagersResponse) GetMessageType() MessageType {
	return MessageType_GET_CLUSTER_MANAGERS_RESPONSE
}

func (x *GetClusterManagersResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Info opts: order:1
	x.Info = &v1.ManagerInfo{}
	if err := x.Info.Parse(reader, version); err != nil {
		return err
	}

	return nil
}
func (x *GetClusterManagersResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Info opts: order:1
	if err := x.Info.Formatter(writer, version); err != nil {
		return err
	}
	return nil
}
func (x *GetClusterManagerInfoRequest) GetMessageType() MessageType {
	return MessageType_GET_CLUSTER_MANAGER_INFO_REQUEST
}

func (x *GetClusterManagerInfoRequest) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.ParseUUID(reader, &x.ClusterId); err != nil {
		return err
	}
	// decode x.ManagerId opts: encoder:"uuid"  order:2
	if err := codec256.ParseUUID(reader, &x.ManagerId); err != nil {
		return err
	}
	return nil
}
func (x *GetClusterManagerInfoRequest) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.ClusterId opts: encoder:"uuid"  order:1
	if err := codec256.FormatUuid(writer, x.ClusterId); err != nil {
		return err
	}
	// decode x.ManagerId opts: encoder:"uuid"  order:2
	if err := codec256.FormatUuid(writer, x.ManagerId); err != nil {
		return err
	}
	return nil
}
func (x *GetClusterManagerInfoResponse) GetMessageType() MessageType {
	return MessageType_GET_CLUSTER_MANAGER_INFO_RESPONSE
}

func (x *GetClusterManagerInfoResponse) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Info opts: order:1
	x.Info = &v1.ManagerInfo{}
	if err := x.Info.Parse(reader, version); err != nil {
		return err
	}

	return nil
}
func (x *GetClusterManagerInfoResponse) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Info opts: order:1
	if err := x.Info.Formatter(writer, version); err != nil {
		return err
	}
	return nil
}
