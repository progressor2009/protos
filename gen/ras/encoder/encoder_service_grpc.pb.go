// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package encoder

import (
	context "context"
	protocol "github.com/v8platform/protos/gen/ras/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncoderServiceClient is the client API for EncoderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncoderServiceClient interface {
	//codec debug func
	Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	//packet debug func
	PacketEncode(ctx context.Context, in *protocol.Packet, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	PacketDecode(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*protocol.Packet, error)
	// Конвертирует любой сообщение в пакет
	// Сообщение должно реализовавать интерфейс пакета
	// * PacketType()
	// * Format()
	NewPacket(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*protocol.Packet, error)
	// Аналог NewPacket только еще сразу кодирует пакет в байты
	NewPacketBytes(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	// Выполняет распаковку пакета в полученное сообщение
	// Распаковывает 1 уровень данных
	// Возможные значения
	// * ras.protocol.ConnectMessageAck
	// * ras.protocol.EndpointFailureAck
	// * ras.protocol.EndpointOpenAck
	// * ras.protocol.EndpointMessage
	UnpackPacket(ctx context.Context, in *protocol.Packet, opts ...grpc.CallOption) (*anypb.Any, error)
}

type encoderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncoderServiceClient(cc grpc.ClientConnInterface) EncoderServiceClient {
	return &encoderServiceClient{cc}
}

func (c *encoderServiceClient) Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/Encode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) PacketEncode(ctx context.Context, in *protocol.Packet, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/PacketEncode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) PacketDecode(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*protocol.Packet, error) {
	out := new(protocol.Packet)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/PacketDecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) NewPacket(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*protocol.Packet, error) {
	out := new(protocol.Packet)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/NewPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) NewPacketBytes(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/NewPacketBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) UnpackPacket(ctx context.Context, in *protocol.Packet, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/ras.encoder.EncoderService/UnpackPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncoderServiceServer is the server API for EncoderService service.
// All implementations should embed UnimplementedEncoderServiceServer
// for forward compatibility
type EncoderServiceServer interface {
	//codec debug func
	Encode(context.Context, *EncodeRequest) (*wrapperspb.BytesValue, error)
	Decode(context.Context, *DecodeRequest) (*anypb.Any, error)
	//packet debug func
	PacketEncode(context.Context, *protocol.Packet) (*wrapperspb.BytesValue, error)
	PacketDecode(context.Context, *wrapperspb.BytesValue) (*protocol.Packet, error)
	// Конвертирует любой сообщение в пакет
	// Сообщение должно реализовавать интерфейс пакета
	// * PacketType()
	// * Format()
	NewPacket(context.Context, *anypb.Any) (*protocol.Packet, error)
	// Аналог NewPacket только еще сразу кодирует пакет в байты
	NewPacketBytes(context.Context, *anypb.Any) (*wrapperspb.BytesValue, error)
	// Выполняет распаковку пакета в полученное сообщение
	// Распаковывает 1 уровень данных
	// Возможные значения
	// * ras.protocol.ConnectMessageAck
	// * ras.protocol.EndpointFailureAck
	// * ras.protocol.EndpointOpenAck
	// * ras.protocol.EndpointMessage
	UnpackPacket(context.Context, *protocol.Packet) (*anypb.Any, error)
}

// UnimplementedEncoderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEncoderServiceServer struct {
}

func (UnimplementedEncoderServiceServer) Encode(context.Context, *EncodeRequest) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedEncoderServiceServer) Decode(context.Context, *DecodeRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedEncoderServiceServer) PacketEncode(context.Context, *protocol.Packet) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PacketEncode not implemented")
}
func (UnimplementedEncoderServiceServer) PacketDecode(context.Context, *wrapperspb.BytesValue) (*protocol.Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PacketDecode not implemented")
}
func (UnimplementedEncoderServiceServer) NewPacket(context.Context, *anypb.Any) (*protocol.Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPacket not implemented")
}
func (UnimplementedEncoderServiceServer) NewPacketBytes(context.Context, *anypb.Any) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPacketBytes not implemented")
}
func (UnimplementedEncoderServiceServer) UnpackPacket(context.Context, *protocol.Packet) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpackPacket not implemented")
}

// UnsafeEncoderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncoderServiceServer will
// result in compilation errors.
type UnsafeEncoderServiceServer interface {
	mustEmbedUnimplementedEncoderServiceServer()
}

func RegisterEncoderServiceServer(s grpc.ServiceRegistrar, srv EncoderServiceServer) {
	s.RegisterService(&EncoderService_ServiceDesc, srv)
}

func _EncoderService_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).Encode(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_PacketEncode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).PacketEncode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/PacketEncode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).PacketEncode(ctx, req.(*protocol.Packet))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_PacketDecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).PacketDecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/PacketDecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).PacketDecode(ctx, req.(*wrapperspb.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_NewPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).NewPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/NewPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).NewPacket(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_NewPacketBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).NewPacketBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/NewPacketBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).NewPacketBytes(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_UnpackPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).UnpackPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ras.encoder.EncoderService/UnpackPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).UnpackPacket(ctx, req.(*protocol.Packet))
	}
	return interceptor(ctx, in, info, handler)
}

// EncoderService_ServiceDesc is the grpc.ServiceDesc for EncoderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncoderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ras.encoder.EncoderService",
	HandlerType: (*EncoderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _EncoderService_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _EncoderService_Decode_Handler,
		},
		{
			MethodName: "PacketEncode",
			Handler:    _EncoderService_PacketEncode_Handler,
		},
		{
			MethodName: "PacketDecode",
			Handler:    _EncoderService_PacketDecode_Handler,
		},
		{
			MethodName: "NewPacket",
			Handler:    _EncoderService_NewPacket_Handler,
		},
		{
			MethodName: "NewPacketBytes",
			Handler:    _EncoderService_NewPacketBytes_Handler,
		},
		{
			MethodName: "UnpackPacket",
			Handler:    _EncoderService_UnpackPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ras/encoder/encoder_service.proto",
}
