// Code generated by github.com/v8platform/protoc-gen-go-ras. DO NOT EDIT.

package serializev1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	io "io"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.
// codec256.io.

func (x *ClusterInfo) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid"  order:1
	if err := codec256.ParseUUID(reader, &x.Uuid); err != nil {
		return err
	}
	// decode x.ExpirationTimeout opts: order:2
	if err := codec256.ParseInt(reader, &x.ExpirationTimeout); err != nil {
		return err
	}
	// decode x.Host opts: order:3
	if err := codec256.ParseString(reader, &x.Host); err != nil {
		return err
	}
	// decode x.LifetimeLimit opts: order:4
	if err := codec256.ParseInt(reader, &x.LifetimeLimit); err != nil {
		return err
	}
	// decode x.Port opts: encoder:"short"  order:5
	if err := codec256.ParseShort(reader, &x.Port); err != nil {
		return err
	}
	// decode x.MaxMemorySize opts: order:6
	if err := codec256.ParseInt(reader, &x.MaxMemorySize); err != nil {
		return err
	}
	// decode x.MaxMemoryTimeLimit opts: order:7
	if err := codec256.ParseInt(reader, &x.MaxMemoryTimeLimit); err != nil {
		return err
	}
	// decode x.Name opts: order:8
	if err := codec256.ParseString(reader, &x.Name); err != nil {
		return err
	}
	// decode x.SecurityLevel opts: order:9
	if err := codec256.ParseInt(reader, &x.SecurityLevel); err != nil {
		return err
	}
	// decode x.SessionFaultToleranceLevel opts: order:10
	if err := codec256.ParseInt(reader, &x.SessionFaultToleranceLevel); err != nil {
		return err
	}
	// decode x.LoadBalancingMode opts: order:11
	if err := codec256.ParseInt(reader, &x.LoadBalancingMode); err != nil {
		return err
	}
	// decode x.ErrorsCountThreshold opts: order:12
	if err := codec256.ParseInt(reader, &x.ErrorsCountThreshold); err != nil {
		return err
	}
	// decode x.KillProblemProcesses opts: order:13
	if err := codec256.ParseBool(reader, &x.KillProblemProcesses); err != nil {
		return err
	}
	if version >= 9 {
		// decode x.KillByMemoryWithDump opts: order:14  version:9
		if err := codec256.ParseBool(reader, &x.KillByMemoryWithDump); err != nil {
			return err
		}
	}
	return nil
}
func (x *ClusterInfo) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid"  order:1
	if err := codec256.FormatUuid(writer, x.Uuid); err != nil {
		return err
	}
	// decode x.ExpirationTimeout opts: order:2
	if err := codec256.FormatInt(writer, x.ExpirationTimeout); err != nil {
		return err
	}
	// decode x.Host opts: order:3
	if err := codec256.FormatString(writer, x.Host); err != nil {
		return err
	}
	// decode x.LifetimeLimit opts: order:4
	if err := codec256.FormatInt(writer, x.LifetimeLimit); err != nil {
		return err
	}
	// decode x.Port opts: encoder:"short"  order:5
	if err := codec256.FormatShort(writer, x.Port); err != nil {
		return err
	}
	// decode x.MaxMemorySize opts: order:6
	if err := codec256.FormatInt(writer, x.MaxMemorySize); err != nil {
		return err
	}
	// decode x.MaxMemoryTimeLimit opts: order:7
	if err := codec256.FormatInt(writer, x.MaxMemoryTimeLimit); err != nil {
		return err
	}
	// decode x.Name opts: order:8
	if err := codec256.FormatString(writer, x.Name); err != nil {
		return err
	}
	// decode x.SecurityLevel opts: order:9
	if err := codec256.FormatInt(writer, x.SecurityLevel); err != nil {
		return err
	}
	// decode x.SessionFaultToleranceLevel opts: order:10
	if err := codec256.FormatInt(writer, x.SessionFaultToleranceLevel); err != nil {
		return err
	}
	// decode x.LoadBalancingMode opts: order:11
	if err := codec256.FormatInt(writer, x.LoadBalancingMode); err != nil {
		return err
	}
	// decode x.ErrorsCountThreshold opts: order:12
	if err := codec256.FormatInt(writer, x.ErrorsCountThreshold); err != nil {
		return err
	}
	// decode x.KillProblemProcesses opts: order:13
	if err := codec256.FormatBool(writer, x.KillProblemProcesses); err != nil {
		return err
	}
	if version >= 9 {
		// decode x.KillByMemoryWithDump opts: order:14  version:9
		if err := codec256.FormatBool(writer, x.KillByMemoryWithDump); err != nil {
			return err
		}
	}
	return nil
}
