// Code generated by github.com/v8platform/protoc-gen-go-ras. DO NOT EDIT.

package serializev1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.
// codec256.io.

func (x *SessionInfo) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid"  order:1
	if err := codec256.ParseUUID(reader, &x.Uuid); err != nil {
		return err
	}
	// decode x.AppId opts: order:2
	if err := codec256.ParseString(reader, &x.AppId); err != nil {
		return err
	}
	// decode x.BlockedByDbms opts: order:3
	if err := codec256.ParseInt(reader, &x.BlockedByDbms); err != nil {
		return err
	}
	// decode x.BlockedByLs opts: order:4
	if err := codec256.ParseInt(reader, &x.BlockedByLs); err != nil {
		return err
	}
	// decode x.BytesAll opts: order:5
	if err := codec256.ParseLong(reader, &x.BytesAll); err != nil {
		return err
	}
	// decode x.BytesLast5Min opts: order:6
	if err := codec256.ParseLong(reader, &x.BytesLast5Min); err != nil {
		return err
	}
	// decode x.CallsAll opts: order:7
	if err := codec256.ParseInt(reader, &x.CallsAll); err != nil {
		return err
	}
	// decode x.CallsLast5Min opts: order:8
	if err := codec256.ParseLong(reader, &x.CallsLast5Min); err != nil {
		return err
	}
	// decode x.ConnectionId opts: encoder:"uuid"  order:9
	if err := codec256.ParseUUID(reader, &x.ConnectionId); err != nil {
		return err
	}
	// decode x.DbmsBytesAll opts: order:10
	if err := codec256.ParseLong(reader, &x.DbmsBytesAll); err != nil {
		return err
	}
	// decode x.DbmsBytesLast5Min opts: order:11
	if err := codec256.ParseLong(reader, &x.DbmsBytesLast5Min); err != nil {
		return err
	}
	// decode x.DbProcInfo opts: order:12
	if err := codec256.ParseString(reader, &x.DbProcInfo); err != nil {
		return err
	}
	// decode x.DbProcTook opts: order:13
	if err := codec256.ParseInt(reader, &x.DbProcTook); err != nil {
		return err
	}
	// decode x.DbProcTookAt opts: encoder:"time"  order:14
	x.DbProcTookAt = &timestamppb.Timestamp{}
	if err := codec256.ParseTime(reader, x.DbProcTookAt); err != nil {
		return err
	}
	// decode x.DurationAll opts: order:15
	if err := codec256.ParseInt(reader, &x.DurationAll); err != nil {
		return err
	}
	// decode x.DurationAllDbms opts: order:16
	if err := codec256.ParseInt(reader, &x.DurationAllDbms); err != nil {
		return err
	}
	// decode x.DurationCurrent opts: order:17
	if err := codec256.ParseInt(reader, &x.DurationCurrent); err != nil {
		return err
	}
	// decode x.DurationCurrentDbms opts: order:18
	if err := codec256.ParseInt(reader, &x.DurationCurrentDbms); err != nil {
		return err
	}
	// decode x.DurationLast_5Min opts: order:19
	if err := codec256.ParseLong(reader, &x.DurationLast_5Min); err != nil {
		return err
	}
	// decode x.DurationLast_5MinDbms opts: order:20
	if err := codec256.ParseLong(reader, &x.DurationLast_5MinDbms); err != nil {
		return err
	}
	// decode x.Host opts: order:21
	if err := codec256.ParseString(reader, &x.Host); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid"  order:22
	if err := codec256.ParseUUID(reader, &x.InfobaseId); err != nil {
		return err
	}
	// decode x.LastActiveAt opts: encoder:"time"  order:23
	x.LastActiveAt = &timestamppb.Timestamp{}
	if err := codec256.ParseTime(reader, x.LastActiveAt); err != nil {
		return err
	}
	// decode x.Hibernate opts: order:24
	if err := codec256.ParseBool(reader, &x.Hibernate); err != nil {
		return err
	}
	// decode x.PassiveSessionHibernateTime opts: order:25
	if err := codec256.ParseInt(reader, &x.PassiveSessionHibernateTime); err != nil {
		return err
	}
	// decode x.HibernateSessionTerminateTime opts: order:26
	if err := codec256.ParseInt(reader, &x.HibernateSessionTerminateTime); err != nil {
		return err
	}
	// decode x.Licenses opts: order:27
	var size_Licenses int
	if err := codec256.ParseSize(reader, &size_Licenses); err != nil {
		return err
	}
	for i := 0; i < size_Licenses; i++ {
		val := &LicenseInfo{}
		if err := val.Parse(reader, version); err != nil {
			return err
		}

		x.Licenses = append(x.Licenses, val)
	}
	// decode x.Locale opts: order:28
	if err := codec256.ParseString(reader, &x.Locale); err != nil {
		return err
	}
	// decode x.ProcessId opts: encoder:"uuid"  order:29
	if err := codec256.ParseUUID(reader, &x.ProcessId); err != nil {
		return err
	}
	// decode x.Id opts: order:30
	if err := codec256.ParseInt(reader, &x.Id); err != nil {
		return err
	}
	// decode x.StartedAt opts: encoder:"time"  order:31
	x.StartedAt = &timestamppb.Timestamp{}
	if err := codec256.ParseTime(reader, x.StartedAt); err != nil {
		return err
	}
	// decode x.UserName opts: order:32
	if err := codec256.ParseString(reader, &x.UserName); err != nil {
		return err
	}
	if version >= 4 {
		// decode x.MemoryCurrent opts: order:33  version:4
		if err := codec256.ParseLong(reader, &x.MemoryCurrent); err != nil {
			return err
		}
		// decode x.MemoryLast5Min opts: order:34  version:4
		if err := codec256.ParseLong(reader, &x.MemoryLast5Min); err != nil {
			return err
		}
		// decode x.MemoryTotal opts: order:35  version:4
		if err := codec256.ParseLong(reader, &x.MemoryTotal); err != nil {
			return err
		}
		// decode x.ReadCurrent opts: order:36  version:4
		if err := codec256.ParseLong(reader, &x.ReadCurrent); err != nil {
			return err
		}
		// decode x.ReadLast5Min opts: order:37  version:4
		if err := codec256.ParseLong(reader, &x.ReadLast5Min); err != nil {
			return err
		}
		// decode x.ReadTotal opts: order:38  version:4
		if err := codec256.ParseLong(reader, &x.ReadTotal); err != nil {
			return err
		}
		// decode x.WriteCurrent opts: order:39  version:4
		if err := codec256.ParseLong(reader, &x.WriteCurrent); err != nil {
			return err
		}
		// decode x.WriteLast5Min opts: order:40  version:4
		if err := codec256.ParseLong(reader, &x.WriteLast5Min); err != nil {
			return err
		}
		// decode x.WriteTotal opts: order:41  version:4
		if err := codec256.ParseLong(reader, &x.WriteTotal); err != nil {
			return err
		}
	}
	if version >= 5 {
		// decode x.DurationCurrentService opts: order:42  version:5
		if err := codec256.ParseInt(reader, &x.DurationCurrentService); err != nil {
			return err
		}
		// decode x.DurationLast5MinService opts: order:43  version:5
		if err := codec256.ParseLong(reader, &x.DurationLast5MinService); err != nil {
			return err
		}
		// decode x.DurationAllService opts: order:44  version:5
		if err := codec256.ParseInt(reader, &x.DurationAllService); err != nil {
			return err
		}
		// decode x.CurrentServiceName opts: order:45  version:5
		if err := codec256.ParseString(reader, &x.CurrentServiceName); err != nil {
			return err
		}
	}
	if version >= 6 {
		// decode x.CpuTimeCurrent opts: order:46  version:6
		if err := codec256.ParseLong(reader, &x.CpuTimeCurrent); err != nil {
			return err
		}
		// decode x.CpuTimeLast5Min opts: order:47  version:6
		if err := codec256.ParseLong(reader, &x.CpuTimeLast5Min); err != nil {
			return err
		}
		// decode x.CpuTimeTotal opts: order:48  version:6
		if err := codec256.ParseLong(reader, &x.CpuTimeTotal); err != nil {
			return err
		}
	}
	if version >= 7 {
		// decode x.DataSeparation opts: order:49  version:7
		if err := codec256.ParseString(reader, &x.DataSeparation); err != nil {
			return err
		}
	}
	if version >= 10 {
		// decode x.ClientIpAddress opts: order:50  version:10
		if err := codec256.ParseString(reader, &x.ClientIpAddress); err != nil {
			return err
		}
	}
	return nil
}
func (x *SessionInfo) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid"  order:1
	if err := codec256.FormatUuid(writer, x.Uuid); err != nil {
		return err
	}
	// decode x.AppId opts: order:2
	if err := codec256.FormatString(writer, x.AppId); err != nil {
		return err
	}
	// decode x.BlockedByDbms opts: order:3
	if err := codec256.FormatInt(writer, x.BlockedByDbms); err != nil {
		return err
	}
	// decode x.BlockedByLs opts: order:4
	if err := codec256.FormatInt(writer, x.BlockedByLs); err != nil {
		return err
	}
	// decode x.BytesAll opts: order:5
	if err := codec256.FormatLong(writer, x.BytesAll); err != nil {
		return err
	}
	// decode x.BytesLast5Min opts: order:6
	if err := codec256.FormatLong(writer, x.BytesLast5Min); err != nil {
		return err
	}
	// decode x.CallsAll opts: order:7
	if err := codec256.FormatInt(writer, x.CallsAll); err != nil {
		return err
	}
	// decode x.CallsLast5Min opts: order:8
	if err := codec256.FormatLong(writer, x.CallsLast5Min); err != nil {
		return err
	}
	// decode x.ConnectionId opts: encoder:"uuid"  order:9
	if err := codec256.FormatUuid(writer, x.ConnectionId); err != nil {
		return err
	}
	// decode x.DbmsBytesAll opts: order:10
	if err := codec256.FormatLong(writer, x.DbmsBytesAll); err != nil {
		return err
	}
	// decode x.DbmsBytesLast5Min opts: order:11
	if err := codec256.FormatLong(writer, x.DbmsBytesLast5Min); err != nil {
		return err
	}
	// decode x.DbProcInfo opts: order:12
	if err := codec256.FormatString(writer, x.DbProcInfo); err != nil {
		return err
	}
	// decode x.DbProcTook opts: order:13
	if err := codec256.FormatInt(writer, x.DbProcTook); err != nil {
		return err
	}
	// decode x.DbProcTookAt opts: encoder:"time"  order:14
	// TODO check nil
	if err := codec256.FormatTime(writer, x.GetDbProcTookAt().AsTime()); err != nil {
		return err
	}
	// decode x.DurationAll opts: order:15
	if err := codec256.FormatInt(writer, x.DurationAll); err != nil {
		return err
	}
	// decode x.DurationAllDbms opts: order:16
	if err := codec256.FormatInt(writer, x.DurationAllDbms); err != nil {
		return err
	}
	// decode x.DurationCurrent opts: order:17
	if err := codec256.FormatInt(writer, x.DurationCurrent); err != nil {
		return err
	}
	// decode x.DurationCurrentDbms opts: order:18
	if err := codec256.FormatInt(writer, x.DurationCurrentDbms); err != nil {
		return err
	}
	// decode x.DurationLast_5Min opts: order:19
	if err := codec256.FormatLong(writer, x.DurationLast_5Min); err != nil {
		return err
	}
	// decode x.DurationLast_5MinDbms opts: order:20
	if err := codec256.FormatLong(writer, x.DurationLast_5MinDbms); err != nil {
		return err
	}
	// decode x.Host opts: order:21
	if err := codec256.FormatString(writer, x.Host); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid"  order:22
	if err := codec256.FormatUuid(writer, x.InfobaseId); err != nil {
		return err
	}
	// decode x.LastActiveAt opts: encoder:"time"  order:23
	// TODO check nil
	if err := codec256.FormatTime(writer, x.GetLastActiveAt().AsTime()); err != nil {
		return err
	}
	// decode x.Hibernate opts: order:24
	if err := codec256.FormatBool(writer, x.Hibernate); err != nil {
		return err
	}
	// decode x.PassiveSessionHibernateTime opts: order:25
	if err := codec256.FormatInt(writer, x.PassiveSessionHibernateTime); err != nil {
		return err
	}
	// decode x.HibernateSessionTerminateTime opts: order:26
	if err := codec256.FormatInt(writer, x.HibernateSessionTerminateTime); err != nil {
		return err
	}
	// decode x.Licenses opts: order:27
	if err := codec256.FormatSize(writer, len(x.Licenses)); err != nil {
		return err
	}
	for i := 0; i < len(x.Licenses); i++ {
		if err := x.Licenses[i].Formatter(writer, version); err != nil {
			return err
		}
	}
	// decode x.Locale opts: order:28
	if err := codec256.FormatString(writer, x.Locale); err != nil {
		return err
	}
	// decode x.ProcessId opts: encoder:"uuid"  order:29
	if err := codec256.FormatUuid(writer, x.ProcessId); err != nil {
		return err
	}
	// decode x.Id opts: order:30
	if err := codec256.FormatInt(writer, x.Id); err != nil {
		return err
	}
	// decode x.StartedAt opts: encoder:"time"  order:31
	// TODO check nil
	if err := codec256.FormatTime(writer, x.GetStartedAt().AsTime()); err != nil {
		return err
	}
	// decode x.UserName opts: order:32
	if err := codec256.FormatString(writer, x.UserName); err != nil {
		return err
	}
	if version >= 4 {
		// decode x.MemoryCurrent opts: order:33  version:4
		if err := codec256.FormatLong(writer, x.MemoryCurrent); err != nil {
			return err
		}
		// decode x.MemoryLast5Min opts: order:34  version:4
		if err := codec256.FormatLong(writer, x.MemoryLast5Min); err != nil {
			return err
		}
		// decode x.MemoryTotal opts: order:35  version:4
		if err := codec256.FormatLong(writer, x.MemoryTotal); err != nil {
			return err
		}
		// decode x.ReadCurrent opts: order:36  version:4
		if err := codec256.FormatLong(writer, x.ReadCurrent); err != nil {
			return err
		}
		// decode x.ReadLast5Min opts: order:37  version:4
		if err := codec256.FormatLong(writer, x.ReadLast5Min); err != nil {
			return err
		}
		// decode x.ReadTotal opts: order:38  version:4
		if err := codec256.FormatLong(writer, x.ReadTotal); err != nil {
			return err
		}
		// decode x.WriteCurrent opts: order:39  version:4
		if err := codec256.FormatLong(writer, x.WriteCurrent); err != nil {
			return err
		}
		// decode x.WriteLast5Min opts: order:40  version:4
		if err := codec256.FormatLong(writer, x.WriteLast5Min); err != nil {
			return err
		}
		// decode x.WriteTotal opts: order:41  version:4
		if err := codec256.FormatLong(writer, x.WriteTotal); err != nil {
			return err
		}
	}
	if version >= 5 {
		// decode x.DurationCurrentService opts: order:42  version:5
		if err := codec256.FormatInt(writer, x.DurationCurrentService); err != nil {
			return err
		}
		// decode x.DurationLast5MinService opts: order:43  version:5
		if err := codec256.FormatLong(writer, x.DurationLast5MinService); err != nil {
			return err
		}
		// decode x.DurationAllService opts: order:44  version:5
		if err := codec256.FormatInt(writer, x.DurationAllService); err != nil {
			return err
		}
		// decode x.CurrentServiceName opts: order:45  version:5
		if err := codec256.FormatString(writer, x.CurrentServiceName); err != nil {
			return err
		}
	}
	if version >= 6 {
		// decode x.CpuTimeCurrent opts: order:46  version:6
		if err := codec256.FormatLong(writer, x.CpuTimeCurrent); err != nil {
			return err
		}
		// decode x.CpuTimeLast5Min opts: order:47  version:6
		if err := codec256.FormatLong(writer, x.CpuTimeLast5Min); err != nil {
			return err
		}
		// decode x.CpuTimeTotal opts: order:48  version:6
		if err := codec256.FormatLong(writer, x.CpuTimeTotal); err != nil {
			return err
		}
	}
	if version >= 7 {
		// decode x.DataSeparation opts: order:49  version:7
		if err := codec256.FormatString(writer, x.DataSeparation); err != nil {
			return err
		}
	}
	if version >= 10 {
		// decode x.ClientIpAddress opts: order:50  version:10
		if err := codec256.FormatString(writer, x.ClientIpAddress); err != nil {
			return err
		}
	}
	return nil
}
