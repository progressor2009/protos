// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package serializev1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	io "io"
)

func (x *ServiceInfo) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Name opts: order:1
	if err := codec256.ParseString(reader, &x.Name); err != nil {
		return err
	}
	// decode x.Descr opts: order:2
	if err := codec256.ParseString(reader, &x.Descr); err != nil {
		return err
	}
	// decode x.MainOnly opts: order:3
	if err := codec256.ParseInt(reader, &x.MainOnly); err != nil {
		return err
	}
	// decode x.Managers opts: encoder:"uuid" order:4
	var size_Managers int
	if err := codec256.ParseSize(reader, &size_Managers); err != nil {
		return err
	}
	for i := 0; i < size_Managers; i++ {
		var val string
		if err := codec256.ParseUUID(reader, &val); err != nil {
			return err
		}
		x.Managers = append(x.Managers, val)
	}
	return nil
}
func (x *ServiceInfo) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Name opts: order:1
	if err := codec256.FormatString(writer, x.Name); err != nil {
		return err
	}
	// decode x.Descr opts: order:2
	if err := codec256.FormatString(writer, x.Descr); err != nil {
		return err
	}
	// decode x.MainOnly opts: order:3
	if err := codec256.FormatInt(writer, x.MainOnly); err != nil {
		return err
	}
	// decode x.Managers opts: encoder:"uuid" order:4
	if err := codec256.FormatSize(writer, len(x.Managers)); err != nil {
		return err
	}
	for i := 0; i < len(x.Managers); i++ {
		if err := codec256.FormatUuid(writer, x.Managers[i]); err != nil {
			return err
		}
	}
	return nil
}
