// Code generated by protoc-gen-go-ras. DO NOT EDIT.

// This is a compile-time assertion to ensure that this generated file
// is compatible with the v8platform/protoc-gen-go-ras ras it is being compiled against.

package serializev1

import (
	codec256 "github.com/v8platform/encoder/ras/codec256"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
)

func (x *ConnectionInfo) Parse(reader io.Reader, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid" order:1
	if err := codec256.ParseUUID(reader, &x.Uuid); err != nil {
		return err
	}
	// decode x.Application opts: order:2
	if err := codec256.ParseString(reader, &x.Application); err != nil {
		return err
	}
	// decode x.BlockedByLs opts: order:3
	if err := codec256.ParseInt(reader, &x.BlockedByLs); err != nil {
		return err
	}
	// decode x.ConnectedAt opts: encoder:"time" order:4
	x.ConnectedAt = &timestamppb.Timestamp{}
	if err := codec256.ParseTime(reader, x.ConnectedAt); err != nil {
		return err
	}
	// decode x.Id opts: order:5
	if err := codec256.ParseInt(reader, &x.Id); err != nil {
		return err
	}
	// decode x.Host opts: order:6
	if err := codec256.ParseString(reader, &x.Host); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:7
	if err := codec256.ParseUUID(reader, &x.InfobaseId); err != nil {
		return err
	}
	// decode x.ProcessId opts: encoder:"uuid" order:8
	if err := codec256.ParseUUID(reader, &x.ProcessId); err != nil {
		return err
	}
	// decode x.SessionId opts: order:9
	if err := codec256.ParseInt(reader, &x.SessionId); err != nil {
		return err
	}
	return nil
}
func (x *ConnectionInfo) Formatter(writer io.Writer, version int32) error {
	if x == nil {
		return nil
	}
	// decode x.Uuid opts: encoder:"uuid" order:1
	if err := codec256.FormatUuid(writer, x.Uuid); err != nil {
		return err
	}
	// decode x.Application opts: order:2
	if err := codec256.FormatString(writer, x.Application); err != nil {
		return err
	}
	// decode x.BlockedByLs opts: order:3
	if err := codec256.FormatInt(writer, x.BlockedByLs); err != nil {
		return err
	}
	// decode x.ConnectedAt opts: encoder:"time" order:4
	// TODO check nil
	if err := codec256.FormatTime(writer, x.GetConnectedAt().AsTime()); err != nil {
		return err
	}
	// decode x.Id opts: order:5
	if err := codec256.FormatInt(writer, x.Id); err != nil {
		return err
	}
	// decode x.Host opts: order:6
	if err := codec256.FormatString(writer, x.Host); err != nil {
		return err
	}
	// decode x.InfobaseId opts: encoder:"uuid" order:7
	if err := codec256.FormatUuid(writer, x.InfobaseId); err != nil {
		return err
	}
	// decode x.ProcessId opts: encoder:"uuid" order:8
	if err := codec256.FormatUuid(writer, x.ProcessId); err != nil {
		return err
	}
	// decode x.SessionId opts: order:9
	if err := codec256.FormatInt(writer, x.SessionId); err != nil {
		return err
	}
	return nil
}
