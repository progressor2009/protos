syntax = "proto3";

package ras.client.v1;
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "ras/protocol/v1/connect.proto";
import "ras/protocol/v1/packet.proto";
import "ras/protocol/v1/endpoint.proto";
import "ras/client/client.proto";
option go_package = "github.com/v8platform/protos/gen/ras/client/v1;clientv1";

service ClientService {

  // Инициализация клиента RAS
  rpc Init(InitRequest) returns (StatusInfo) {};
  // Возвращает состояние клиента
  rpc Status(google.protobuf.Empty) returns (StatusInfo) {};
  // Открытие новой точки работы с RAS
  rpc NewEndpoint(NewEndpointRequest) returns (protocol.v1.Endpoint) {};
  // Закрытие точки работы с RAS
  rpc CloseEndpoint(protocol.v1.Endpoint) returns (google.protobuf.Empty) {};
  // Основное метод раборы с запросами к RAS
  // EndpointRequest должно реализовавать интерфейс сообщения точки работы
  // * MessageType()
  // * Format()
  rpc Requests(stream EndpointRequest) returns (stream google.protobuf.Any) {};

  // Низкоуровневые методы клиента
  // Для ручного использования
  rpc Negotiate(protocol.v1.NegotiateMessage) returns (google.protobuf.Empty);
  rpc Connect(protocol.v1.ConnectMessage) returns (protocol.v1.ConnectMessageAck) {};
  rpc Disconnect(protocol.v1.DisconnectMessage) returns (google.protobuf.Empty) {};
  rpc EndpointOpen(protocol.v1.EndpointOpen) returns (protocol.v1.EndpointOpenAck) {};
  rpc EndpointClose(protocol.v1.EndpointClose) returns (google.protobuf.Empty) {};
  rpc EndpointMessage(protocol.v1.EndpointMessage) returns (protocol.v1.EndpointMessage) {};

}

message InitRequest {
  string host = 1;
  LazyInitOptions lazy = 2;
  int32 idle_timeout = 3;
}

message NewEndpointRequest {
  message EndpointOptions {
    optional string service = 1;
    optional int32 version = 2;
  }

  oneof request {
    google.protobuf.Empty auto = 1;
    EndpointOptions options = 2;
    protocol.v1.EndpointOpen open = 3;
  }

}

message StatusInfo {

  bool connected = 1;
  bool ready = 2;
  reserved 3;
  int32 service_version = 4;
  repeated protocol.v1.Endpoint endpoints = 5;
  google.protobuf.Timestamp last_used = 6;
  PacketStat packet_stat = 7;
}

message PacketStat {
    int32 recv = 1;
    int32 send = 2;
    int32 wrong = 3;
}

message LazyInitOptions {

  protocol.v1.NegotiateMessage negotiate = 1;
  protocol.v1.ConnectMessage connect = 2;
  optional protocol.v1.EndpointOpen open_endpoint = 3;

}

message EndpointRequest {

  int32 id = 1;
  int32 format = 2;
  int32 version = 3;
  google.protobuf.Any value = 4;

}

message EndpointResponse {

  int32 id = 1;
  int32 format = 2;
  int32 version = 3;
  google.protobuf.Any value = 5;
}