syntax = "proto3";

package ras.client.v1;
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "ras/protocol/v1/connect.proto";
import "ras/protocol/v1/packet.proto";
import "ras/protocol/v1/endpoint.proto";
import "ras/client/client.proto";
option go_package = "github.com/v8platform/protos/gen/ras/client/v1;clientv1";

service Client {

  rpc Negotiate(protocol.v1.NegotiateMessage) returns (google.protobuf.Empty);
  rpc Connect(protocol.v1.ConnectMessage) returns (protocol.v1.ConnectMessageAck) {};
  rpc Disconnect(protocol.v1.DisconnectMessage) returns (google.protobuf.Empty) {};

  rpc EndpointOpen(protocol.v1.EndpointOpen) returns (protocol.v1.EndpointOpenAck) {};
  rpc EndpointClose(protocol.v1.EndpointClose) returns (google.protobuf.Empty) {};
  rpc EndpointMessage(protocol.v1.EndpointMessage) returns (protocol.v1.EndpointMessage) {};

  //codec debug func
  rpc Encode(EncodeRequest) returns (BytesValue) {};
  rpc Decode(DecodeRequest) returns (google.protobuf.Any) {};

  //packet debug func
  rpc EncodePacket(google.protobuf.Any) returns (BytesValue);
  rpc DecodePacket(BytesValue) returns (google.protobuf.Any);

  // Warp rpc EndpointMessage with create protocol.v1.EndpointMessage and decode response
  rpc Requests(stream EndpointRequest) returns (stream google.protobuf.Any) {};

}

message DecodeRequest {
  int32 version = 1;
  bytes data = 2;
}

message EncodeRequest {
  int32 version = 1;
  google.protobuf.Any data = 2;
}

message BytesValue {
  bytes value = 1;
}

message EndpointRequest {

  int32 id = 1;
  int32 format = 2;
  int32 version = 3;
  google.protobuf.Any value = 4;

}

message EndpointResponse {

  int32 id = 1;
  int32 format = 2;
  int32 version = 3;
  google.protobuf.Any value = 5;
}