
syntax = "proto3";

package ras.serialize.v1;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "ras/serialize/v1/param.proto";
import "ras/serialize/v1/types.proto";
import "ras/encoding/ras.proto";


option go_package = "github.com/v8platform/ras/serialize/v1";
option (ras.encoding.options) = {
  generate_unmarshal: true,
  generate_marshaller: true,
  generate_tags: true,
};

message NegotiateMessage {
  option (ras.encoding.request_type) = NEGOTIATE;

  RequestType type = 1 [(ras.encoding.tags) = "ras:\"byte,1\""]; // USE ONLY NEGOTIATE
  int32 magic = 2 [(ras.encoding.tags) = "ras:\",2\""];      // Use only one value `475223888`
  int32 protocol = 3 [(ras.encoding.tags) = "ras:\"short,3\""];
  int32 version = 4 [(ras.encoding.tags) = "ras:\"short,4\""];
}

message ConnectMessage {
  option (ras.encoding.request_type) = CONNECT;

  RequestType type = 1 [(ras.encoding.tags) = "ras:\"byte,1\"",
    (ras.encoding.field) = {
      encoder: "byte",
      number: 1,
    }]; // USE ONLY NEGOTIATE
  map<string, Param> params = 2 [(ras.encoding.tags) = "ras:\"byte,1\""];;
}

message ConnectMessageAck {
  option (ras.encoding.request_type) = CONNECT_ACK;
}