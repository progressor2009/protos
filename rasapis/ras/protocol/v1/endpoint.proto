syntax = "proto3";

package ras.protocol.v1;

import "ras/protocol/v1/param.proto";
import "ras/encoding/ras.proto";
import "ras/protocol/v1/types.proto";
import "ras/protocol/v1/packet.proto";
import "ras/protocol/v1/options.proto";
import "google/protobuf/any.proto";
import "google/protobuf/type.proto";
import "ras/messages/v1/types.proto";
import "ras/messages/v1/clusters.proto";

option go_package = "github.com/v8platform/protos/gen/rasbinary/protocol/v1";

option (ras.encoding.options) = {
  generate_unmarshal: true,
  generate_marshaller: true,
  generate_tags: true,
};

message EndpointOpen {
  option (packet_type) = PACKET_TYPE_ENDPOINT_OPEN;
  string service = 1 [(ras.encoding.field).order = 1];
  string encoding = 2 [(ras.encoding.field).order = 2];
  string version = 3 [(ras.encoding.field).order = 3];
  map<string, Param> params = 4 [(ras.encoding.field).order = 4];
}

message EndpointOpenAck {
  option (packet_type) = PACKET_TYPE_ENDPOINT_OPEN_ACK;
  string service_id = 1 [(ras.encoding.field).order = 1];
  int32 version = 2 [(ras.encoding.field) = {
    order: 2,
    encoder: "string",
  }];
  int32 endpoint_id = 3 [(ras.encoding.field) = {
    order: 3,
    encoder: "null-size",
  }];
  map<string, Param> params = 4 [(ras.encoding.field).order = 4];
}

message EndpointMessage {
  option (packet_type) = PACKET_TYPE_ENDPOINT_MESSAGE;
  int32 endpoint_id = 1 [(ras.encoding.field) = {
    order: 1,
    encoder: "null-size",
  }];
  int32 format = 2 [(ras.encoding.field) = {
    order: 2,
    encoder: "short",
  }];
  EndpointDataType type = 3 [(ras.encoding.field) = {
    order: 3,
    encoder: "byte",
  }];
  oneof data {
    EndpointDataVoidMessage void_message = 4 [
      (ras.encoding.field) = { order: 4, type_field: 3}];
    EndpointDataMessage message = 5 [
      (ras.encoding.field) = { order: 4, type_field: 3}];
    EndpointFailureMessage failure = 6 [
      (ras.encoding.field) = { order: 4, type_field: 3}];
  };
}

message EndpointFailureAck  {
  option (packet_type) = PACKET_TYPE_ENDPOINT_FAILURE;
  string service_id = 2;
  string version = 3;
  int32 endpoint_id = 4;
  string class_cause = 5;
  string message = 6;
  repeated string trace = 7;
  optional CauseError cause = 8;
}

message CauseError {
  option (ras.encoding.message_options) = {
    generate_marshaller: false,
  };
  string service_id = 1;
  string message = 2;
  optional CauseError cause = 3;
}

message EndpointDataVoidMessage {
  option (endpoint_data_type) = ENDPOINT_DATA_TYPE_VOID_MESSAGE;
}

message EndpointDataMessage {
  option (endpoint_data_type) = ENDPOINT_DATA_TYPE_MESSAGE;
  ras.messages.v1.MessageType type = 1 [(ras.encoding.field) = {
    order: 1,
    encoder: "byte",
  }];

  bytes bytes = 2 [(ras.encoding.field) = { order: 2 }];

}

message EndpointFailureMessage {
  option (endpoint_data_type) = ENDPOINT_DATA_TYPE_EXCEPTION;
  string service_id = 1;
  string message = 2;
  optional CauseError cause = 3;
}